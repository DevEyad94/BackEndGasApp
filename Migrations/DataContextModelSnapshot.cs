// <auto-generated />
using System;
using BackEndGasApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace project.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackEndGasApp.Models.FieldMaintenance", b =>
                {
                    b.Property<Guid>("FieldMaintenanceGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FieldMaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("zFieldId")
                        .HasColumnType("integer");

                    b.Property<int>("zMaintenanceTypeId")
                        .HasColumnType("integer");

                    b.HasKey("FieldMaintenanceGuid");

                    b.HasIndex("zFieldId");

                    b.HasIndex("zMaintenanceTypeId");

                    b.ToTable("FieldMaintenances");
                });

            modelBuilder.Entity("BackEndGasApp.Models.ProductionRecord", b =>
                {
                    b.Property<Guid>("ProductionRecordGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfProduction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ProductionOfCost")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductionRate")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int>("zFieldId")
                        .HasColumnType("integer");

                    b.HasKey("ProductionRecordGuid");

                    b.HasIndex("zFieldId");

                    b.ToTable("ProductionRecords");
                });

            modelBuilder.Entity("BackEndGasApp.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackEndGasApp.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserRoleID"));

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<int>("zRoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserRoleID");

                    b.HasIndex("UserID");

                    b.HasIndex("zRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BackEndGasApp.Models.zsk.zField", b =>
                {
                    b.Property<int>("zFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("zFieldId"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("zFieldId");

                    b.ToTable("zFields");

                    b.HasData(
                        new
                        {
                            zFieldId = 1,
                            Latitude = 21.123460000000001,
                            Longitude = 55.123449999999998,
                            Name = "Wusta"
                        },
                        new
                        {
                            zFieldId = 2,
                            Latitude = 22.654319999999998,
                            Longitude = 56.654319999999998,
                            Name = "North Oman"
                        },
                        new
                        {
                            zFieldId = 3,
                            Latitude = 20.987649999999999,
                            Longitude = 54.987650000000002,
                            Name = "South Block"
                        },
                        new
                        {
                            zFieldId = 4,
                            Latitude = 23.456790000000002,
                            Longitude = 57.123449999999998,
                            Name = "West Basin"
                        },
                        new
                        {
                            zFieldId = 5,
                            Latitude = 22.123460000000001,
                            Longitude = 55.654319999999998,
                            Name = "Central Field"
                        },
                        new
                        {
                            zFieldId = 6,
                            Latitude = 19.987649999999999,
                            Longitude = 53.987650000000002,
                            Name = "Desert Zone"
                        },
                        new
                        {
                            zFieldId = 7,
                            Latitude = 20.654319999999998,
                            Longitude = 54.654319999999998,
                            Name = "Offshore Block"
                        },
                        new
                        {
                            zFieldId = 8,
                            Latitude = 21.987649999999999,
                            Longitude = 55.987650000000002,
                            Name = "Eastern Zone"
                        },
                        new
                        {
                            zFieldId = 9,
                            Latitude = 22.123460000000001,
                            Longitude = 56.123449999999998,
                            Name = "South Field"
                        },
                        new
                        {
                            zFieldId = 10,
                            Latitude = 23.654319999999998,
                            Longitude = 57.654319999999998,
                            Name = "Border Zone"
                        });
                });

            modelBuilder.Entity("BackEndGasApp.Models.zsk.zMaintenanceType", b =>
                {
                    b.Property<int>("zMaintenanceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("zMaintenanceTypeId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("zMaintenanceTypeId");

                    b.ToTable("zMaintenanceTypes");

                    b.HasData(
                        new
                        {
                            zMaintenanceTypeId = 1,
                            Code = "M1",
                            Name = "Maintenance Type 1"
                        },
                        new
                        {
                            zMaintenanceTypeId = 2,
                            Code = "M2",
                            Name = "Maintenance Type 2"
                        },
                        new
                        {
                            zMaintenanceTypeId = 3,
                            Code = "M3",
                            Name = "Maintenance Type 3"
                        },
                        new
                        {
                            zMaintenanceTypeId = 4,
                            Code = "M4",
                            Name = "Maintenance Type 4"
                        },
                        new
                        {
                            zMaintenanceTypeId = 5,
                            Code = "M5",
                            Name = "Maintenance Type 5"
                        });
                });

            modelBuilder.Entity("BackEndGasApp.Models.zsk.zRole", b =>
                {
                    b.Property<int>("zRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("zRoleID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("zRoleID");

                    b.ToTable("zRoles");

                    b.HasData(
                        new
                        {
                            zRoleID = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            zRoleID = 2,
                            Name = "Operator"
                        },
                        new
                        {
                            zRoleID = 3,
                            Name = "Engineer"
                        });
                });

            modelBuilder.Entity("BackEndGasApp.Models.FieldMaintenance", b =>
                {
                    b.HasOne("BackEndGasApp.Models.zsk.zField", "zField")
                        .WithMany()
                        .HasForeignKey("zFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndGasApp.Models.zsk.zMaintenanceType", "zMaintenanceType")
                        .WithMany()
                        .HasForeignKey("zMaintenanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("zField");

                    b.Navigation("zMaintenanceType");
                });

            modelBuilder.Entity("BackEndGasApp.Models.ProductionRecord", b =>
                {
                    b.HasOne("BackEndGasApp.Models.zsk.zField", "zField")
                        .WithMany()
                        .HasForeignKey("zFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("zField");
                });

            modelBuilder.Entity("BackEndGasApp.Models.UserRole", b =>
                {
                    b.HasOne("BackEndGasApp.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndGasApp.Models.zsk.zRole", "zRole")
                        .WithMany()
                        .HasForeignKey("zRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("zRole");
                });

            modelBuilder.Entity("BackEndGasApp.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
