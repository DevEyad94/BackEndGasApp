{"version":3,"sources":["node_modules/ngx-echarts/fesm2022/ngx-echarts.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Directive, Inject, Input, Output, NgModule } from '@angular/core';\nimport { ReplaySubject, Subscription, Subject, asyncScheduler, Observable } from 'rxjs';\nimport { throttleTime, switchMap } from 'rxjs/operators';\nclass ChangeFilterV2 {\n  constructor() {\n    this.subject = new ReplaySubject(1);\n    this.subscriptions = new Subscription();\n  }\n  doFilter(changes) {\n    this.subject.next(changes);\n  }\n  dispose() {\n    this.subscriptions.unsubscribe();\n  }\n  notEmpty(key, handler) {\n    this.subscriptions.add(this.subject.subscribe(changes => {\n      if (changes[key]) {\n        const value = changes[key].currentValue;\n        if (value !== undefined && value !== null) {\n          handler(value);\n        }\n      }\n    }));\n  }\n  has(key, handler) {\n    this.subscriptions.add(this.subject.subscribe(changes => {\n      if (changes[key]) {\n        const value = changes[key].currentValue;\n        handler(value);\n      }\n    }));\n  }\n  notFirst(key, handler) {\n    this.subscriptions.add(this.subject.subscribe(changes => {\n      if (changes[key] && !changes[key].isFirstChange()) {\n        const value = changes[key].currentValue;\n        handler(value);\n      }\n    }));\n  }\n  notFirstAndEmpty(key, handler) {\n    this.subscriptions.add(this.subject.subscribe(changes => {\n      if (changes[key] && !changes[key].isFirstChange()) {\n        const value = changes[key].currentValue;\n        if (value !== undefined && value !== null) {\n          handler(value);\n        }\n      }\n    }));\n  }\n}\nconst NGX_ECHARTS_CONFIG = new InjectionToken('NGX_ECHARTS_CONFIG');\nlet NgxEchartsDirective = /*#__PURE__*/(() => {\n  class NgxEchartsDirective {\n    constructor(config, el, ngZone) {\n      this.el = el;\n      this.ngZone = ngZone;\n      this.options = null;\n      this.theme = null;\n      this.initOpts = null;\n      this.merge = null;\n      this.autoResize = true;\n      this.loading = false;\n      this.loadingType = 'default';\n      this.loadingOpts = null;\n      // ngx-echarts events\n      this.chartInit = new EventEmitter();\n      this.optionsError = new EventEmitter();\n      // echarts mouse events\n      this.chartClick = this.createLazyEvent('click');\n      this.chartDblClick = this.createLazyEvent('dblclick');\n      this.chartMouseDown = this.createLazyEvent('mousedown');\n      this.chartMouseMove = this.createLazyEvent('mousemove');\n      this.chartMouseUp = this.createLazyEvent('mouseup');\n      this.chartMouseOver = this.createLazyEvent('mouseover');\n      this.chartMouseOut = this.createLazyEvent('mouseout');\n      this.chartGlobalOut = this.createLazyEvent('globalout');\n      this.chartContextMenu = this.createLazyEvent('contextmenu');\n      // echarts events\n      this.chartHighlight = this.createLazyEvent('highlight');\n      this.chartDownplay = this.createLazyEvent('downplay');\n      this.chartSelectChanged = this.createLazyEvent('selectchanged');\n      this.chartLegendSelectChanged = this.createLazyEvent('legendselectchanged');\n      this.chartLegendSelected = this.createLazyEvent('legendselected');\n      this.chartLegendUnselected = this.createLazyEvent('legendunselected');\n      this.chartLegendLegendSelectAll = this.createLazyEvent('legendselectall');\n      this.chartLegendLegendInverseSelect = this.createLazyEvent('legendinverseselect');\n      this.chartLegendScroll = this.createLazyEvent('legendscroll');\n      this.chartDataZoom = this.createLazyEvent('datazoom');\n      this.chartDataRangeSelected = this.createLazyEvent('datarangeselected');\n      this.chartGraphRoam = this.createLazyEvent('graphroam');\n      this.chartGeoRoam = this.createLazyEvent('georoam');\n      this.chartTreeRoam = this.createLazyEvent('treeroam');\n      this.chartTimelineChanged = this.createLazyEvent('timelinechanged');\n      this.chartTimelinePlayChanged = this.createLazyEvent('timelineplaychanged');\n      this.chartRestore = this.createLazyEvent('restore');\n      this.chartDataViewChanged = this.createLazyEvent('dataviewchanged');\n      this.chartMagicTypeChanged = this.createLazyEvent('magictypechanged');\n      this.chartGeoSelectChanged = this.createLazyEvent('geoselectchanged');\n      this.chartGeoSelected = this.createLazyEvent('geoselected');\n      this.chartGeoUnselected = this.createLazyEvent('geounselected');\n      this.chartAxisAreaSelected = this.createLazyEvent('axisareaselected');\n      this.chartBrush = this.createLazyEvent('brush');\n      this.chartBrushEnd = this.createLazyEvent('brushend');\n      this.chartBrushSelected = this.createLazyEvent('brushselected');\n      this.chartGlobalCursorTaken = this.createLazyEvent('globalcursortaken');\n      this.chartRendered = this.createLazyEvent('rendered');\n      this.chartFinished = this.createLazyEvent('finished');\n      this.animationFrameID = null;\n      this.chart$ = new ReplaySubject(1);\n      this.resize$ = new Subject();\n      this.changeFilter = new ChangeFilterV2();\n      this.resizeObFired = false;\n      this.echarts = config.echarts;\n      this.theme = config.theme || null;\n    }\n    ngOnChanges(changes) {\n      this.changeFilter.doFilter(changes);\n    }\n    ngOnInit() {\n      if (!window.ResizeObserver) {\n        throw new Error('please install a polyfill for ResizeObserver');\n      }\n      this.resizeSub = this.resize$.pipe(throttleTime(100, asyncScheduler, {\n        leading: false,\n        trailing: true\n      })).subscribe(() => this.resize());\n      if (this.autoResize) {\n        // https://github.com/xieziyu/ngx-echarts/issues/413\n        this.resizeOb = this.ngZone.runOutsideAngular(() => new window.ResizeObserver(entries => {\n          for (const entry of entries) {\n            if (entry.target === this.el.nativeElement) {\n              // Ignore first fire on insertion, no resize actually happened\n              if (!this.resizeObFired) {\n                this.resizeObFired = true;\n              } else {\n                this.animationFrameID = window.requestAnimationFrame(() => {\n                  this.resize$.next();\n                });\n              }\n            }\n          }\n        }));\n        this.resizeOb.observe(this.el.nativeElement);\n      }\n      this.changeFilter.notFirstAndEmpty('options', opt => this.onOptionsChange(opt));\n      this.changeFilter.notFirstAndEmpty('merge', opt => this.setOption(opt));\n      this.changeFilter.has('loading', v => this.toggleLoading(!!v));\n      this.changeFilter.notFirst('theme', () => this.refreshChart());\n    }\n    ngOnDestroy() {\n      window.clearTimeout(this.initChartTimer);\n      if (this.resizeSub) {\n        this.resizeSub.unsubscribe();\n      }\n      if (this.animationFrameID) {\n        window.cancelAnimationFrame(this.animationFrameID);\n      }\n      if (this.resizeOb) {\n        this.resizeOb.unobserve(this.el.nativeElement);\n      }\n      if (this.loadingSub) {\n        this.loadingSub.unsubscribe();\n      }\n      this.changeFilter.dispose();\n      this.dispose();\n    }\n    ngAfterViewInit() {\n      this.initChartTimer = window.setTimeout(() => this.initChart());\n    }\n    dispose() {\n      if (this.chart) {\n        if (!this.chart.isDisposed()) {\n          this.chart.dispose();\n        }\n        this.chart = null;\n      }\n    }\n    /**\n     * resize chart\n     */\n    resize() {\n      if (this.chart) {\n        this.chart.resize();\n      }\n    }\n    toggleLoading(loading) {\n      if (this.chart) {\n        loading ? this.chart.showLoading(this.loadingType, this.loadingOpts) : this.chart.hideLoading();\n      } else {\n        this.loadingSub = this.chart$.subscribe(chart => loading ? chart.showLoading(this.loadingType, this.loadingOpts) : chart.hideLoading());\n      }\n    }\n    setOption(option, opts) {\n      if (this.chart) {\n        try {\n          this.chart.setOption(option, opts);\n        } catch (e) {\n          console.error(e);\n          this.optionsError.emit(e);\n        }\n      }\n    }\n    /**\n     * dispose old chart and create a new one.\n     */\n    async refreshChart() {\n      this.dispose();\n      await this.initChart();\n    }\n    createChart() {\n      const dom = this.el.nativeElement;\n      if (window && window.getComputedStyle) {\n        const prop = window.getComputedStyle(dom, null).getPropertyValue('height');\n        if ((!prop || prop === '0px') && (!dom.style.height || dom.style.height === '0px')) {\n          dom.style.height = '400px';\n        }\n      }\n      // here a bit tricky: we check if the echarts module is provided as function returning native import('...') then use the promise\n      // otherwise create the function that imitates behaviour above with a provided as is module\n      return this.ngZone.runOutsideAngular(() => {\n        const load = typeof this.echarts === 'function' ? this.echarts : () => Promise.resolve(this.echarts);\n        return load().then(({\n          init\n        }) => init(dom, this.theme, this.initOpts));\n      });\n    }\n    async initChart() {\n      await this.onOptionsChange(this.options);\n      if (this.merge && this.chart) {\n        this.setOption(this.merge);\n      }\n    }\n    async onOptionsChange(opt) {\n      if (!opt) {\n        return;\n      }\n      if (this.chart) {\n        this.setOption(this.options, true);\n      } else {\n        this.chart = await this.createChart();\n        this.chart$.next(this.chart);\n        this.chartInit.emit(this.chart);\n        this.setOption(this.options, true);\n      }\n    }\n    // allows to lazily bind to only those events that are requested through the `@Output` by parent components\n    // see https://stackoverflow.com/questions/51787972/optimal-reentering-the-ngzone-from-eventemitter-event for more info\n    createLazyEvent(eventName) {\n      return this.chartInit.pipe(switchMap(chart => new Observable(observer => {\n        chart.on(eventName, data => this.ngZone.run(() => observer.next(data)));\n        return () => {\n          if (this.chart) {\n            if (!this.chart.isDisposed()) {\n              chart.off(eventName);\n            }\n          }\n        };\n      })));\n    }\n    static {\n      this.ɵfac = function NgxEchartsDirective_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || NgxEchartsDirective)(i0.ɵɵdirectiveInject(NGX_ECHARTS_CONFIG), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n        type: NgxEchartsDirective,\n        selectors: [[\"echarts\"], [\"\", \"echarts\", \"\"]],\n        inputs: {\n          options: \"options\",\n          theme: \"theme\",\n          initOpts: \"initOpts\",\n          merge: \"merge\",\n          autoResize: \"autoResize\",\n          loading: \"loading\",\n          loadingType: \"loadingType\",\n          loadingOpts: \"loadingOpts\"\n        },\n        outputs: {\n          chartInit: \"chartInit\",\n          optionsError: \"optionsError\",\n          chartClick: \"chartClick\",\n          chartDblClick: \"chartDblClick\",\n          chartMouseDown: \"chartMouseDown\",\n          chartMouseMove: \"chartMouseMove\",\n          chartMouseUp: \"chartMouseUp\",\n          chartMouseOver: \"chartMouseOver\",\n          chartMouseOut: \"chartMouseOut\",\n          chartGlobalOut: \"chartGlobalOut\",\n          chartContextMenu: \"chartContextMenu\",\n          chartHighlight: \"chartHighlight\",\n          chartDownplay: \"chartDownplay\",\n          chartSelectChanged: \"chartSelectChanged\",\n          chartLegendSelectChanged: \"chartLegendSelectChanged\",\n          chartLegendSelected: \"chartLegendSelected\",\n          chartLegendUnselected: \"chartLegendUnselected\",\n          chartLegendLegendSelectAll: \"chartLegendLegendSelectAll\",\n          chartLegendLegendInverseSelect: \"chartLegendLegendInverseSelect\",\n          chartLegendScroll: \"chartLegendScroll\",\n          chartDataZoom: \"chartDataZoom\",\n          chartDataRangeSelected: \"chartDataRangeSelected\",\n          chartGraphRoam: \"chartGraphRoam\",\n          chartGeoRoam: \"chartGeoRoam\",\n          chartTreeRoam: \"chartTreeRoam\",\n          chartTimelineChanged: \"chartTimelineChanged\",\n          chartTimelinePlayChanged: \"chartTimelinePlayChanged\",\n          chartRestore: \"chartRestore\",\n          chartDataViewChanged: \"chartDataViewChanged\",\n          chartMagicTypeChanged: \"chartMagicTypeChanged\",\n          chartGeoSelectChanged: \"chartGeoSelectChanged\",\n          chartGeoSelected: \"chartGeoSelected\",\n          chartGeoUnselected: \"chartGeoUnselected\",\n          chartAxisAreaSelected: \"chartAxisAreaSelected\",\n          chartBrush: \"chartBrush\",\n          chartBrushEnd: \"chartBrushEnd\",\n          chartBrushSelected: \"chartBrushSelected\",\n          chartGlobalCursorTaken: \"chartGlobalCursorTaken\",\n          chartRendered: \"chartRendered\",\n          chartFinished: \"chartFinished\"\n        },\n        exportAs: [\"echarts\"],\n        features: [i0.ɵɵNgOnChangesFeature]\n      });\n    }\n  }\n  return NgxEchartsDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst provideEchartsCore = config => {\n  return {\n    provide: NGX_ECHARTS_CONFIG,\n    useValue: config\n  };\n};\nlet NgxEchartsModule = /*#__PURE__*/(() => {\n  class NgxEchartsModule {\n    static forRoot(config) {\n      return {\n        ngModule: NgxEchartsModule,\n        providers: [provideEchartsCore(config)]\n      };\n    }\n    static forChild() {\n      return {\n        ngModule: NgxEchartsModule\n      };\n    }\n    static {\n      this.ɵfac = function NgxEchartsModule_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || NgxEchartsModule)();\n      };\n    }\n    static {\n      this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n        type: NgxEchartsModule\n      });\n    }\n    static {\n      this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n    }\n  }\n  return NgxEchartsModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ngx-echarts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_ECHARTS_CONFIG, NgxEchartsDirective, NgxEchartsModule, provideEchartsCore };\n"],"mappings":"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","names":["ChangeFilterV2","ReplaySubject","Subscription","changes","key","handler","value","NGX_ECHARTS_CONFIG","InjectionToken","NgxEchartsDirective","config","el","ngZone","EventEmitter","Subject","throttleTime","asyncScheduler","entries","entry","opt","v","loading","chart","option","opts","e","__async","dom","prop","init","eventName","switchMap","Observable","observer","data","__ngFactoryType__","ɵɵdirectiveInject","ElementRef","NgZone","ɵɵdefineDirective","ɵɵNgOnChangesFeature","provideEchartsCore","NgxEchartsModule","ɵɵdefineNgModule","ɵɵdefineInjector"],"x_google_ignoreList":[0]}