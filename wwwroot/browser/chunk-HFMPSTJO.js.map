{
  "version": 3,
  "sources": ["src/app/shared/services/dashboard.service.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { DashboardResponse } from '../../models/dashboard.model';\nimport { DashboardFilter } from '../../models/dashboard.model';\nimport { GenericResponse } from '../../models/pagination.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DashboardService {\n  private baseUrl = `${environment.apiUrl}Dashboard`;\n\n  constructor(private http: HttpClient) { }\n\n  getDashboardData(filter: DashboardFilter = {}): Observable<DashboardResponse> {\n    let params = new HttpParams();\n\n    if (filter.minProductionRate !== undefined && filter.minProductionRate !== null) {\n      params = params.set('MinProductionRate', filter.minProductionRate.toString());\n    }\n\n    if (filter.maxProductionRate !== undefined && filter.maxProductionRate !== null) {\n      params = params.set('MaxProductionRate', filter.maxProductionRate.toString());\n    }\n\n    if (filter.extractionYear !== undefined && filter.extractionYear !== null) {\n      params = params.set('ExtractionYear', filter.extractionYear.toString());\n    }\n\n    if (filter.fromYear !== undefined && filter.fromYear !== null) {\n      params = params.set('FromYear', filter.fromYear.toString());\n    }\n\n    if (filter.toYear !== undefined && filter.toYear !== null) {\n      params = params.set('ToYear', filter.toYear.toString());\n    }\n\n    if (filter.maintenanceTypeId !== undefined && filter.maintenanceTypeId !== null) {\n      params = params.set('MaintenanceTypeId', filter.maintenanceTypeId.toString());\n    }\n\n    if (filter.minCost !== undefined && filter.minCost !== null) {\n      params = params.set('MinCost', filter.minCost.toString());\n    }\n\n    if (filter.maxCost !== undefined && filter.maxCost !== null) {\n      params = params.set('MaxCost', filter.maxCost.toString());\n    }\n\n    if (filter.fieldId !== undefined && filter.fieldId !== null) {\n      params = params.set('FieldId', filter.fieldId.toString());\n    }\n\n    return this.http.get<GenericResponse<DashboardResponse>>(this.baseUrl, { params }).pipe(\n      map(response => response.data)\n    );\n  }\n\n  exportDashboardData(filter: DashboardFilter = {}, format: 'pdf' | 'excel'): Observable<Blob> {\n    let params = new HttpParams();\n\n    // Set format parameter\n    params = params.set('format', format);\n\n    // Add filter parameters\n    if (filter.minProductionRate !== undefined && filter.minProductionRate !== null) {\n      params = params.set('MinProductionRate', filter.minProductionRate.toString());\n    }\n\n    if (filter.maxProductionRate !== undefined && filter.maxProductionRate !== null) {\n      params = params.set('MaxProductionRate', filter.maxProductionRate.toString());\n    }\n\n    if (filter.extractionYear !== undefined && filter.extractionYear !== null) {\n      params = params.set('ExtractionYear', filter.extractionYear.toString());\n    }\n\n    if (filter.fromYear !== undefined && filter.fromYear !== null) {\n      params = params.set('FromYear', filter.fromYear.toString());\n    }\n\n    if (filter.toYear !== undefined && filter.toYear !== null) {\n      params = params.set('ToYear', filter.toYear.toString());\n    }\n\n    if (filter.maintenanceTypeId !== undefined && filter.maintenanceTypeId !== null) {\n      params = params.set('MaintenanceTypeId', filter.maintenanceTypeId.toString());\n    }\n\n    if (filter.minCost !== undefined && filter.minCost !== null) {\n      params = params.set('MinCost', filter.minCost.toString());\n    }\n\n    if (filter.maxCost !== undefined && filter.maxCost !== null) {\n      params = params.set('MaxCost', filter.maxCost.toString());\n    }\n\n    if (filter.fieldId !== undefined && filter.fieldId !== null) {\n      params = params.set('FieldId', filter.fieldId.toString());\n    }\n\n    return this.http.get(`${this.baseUrl}/export`, {\n      params,\n      responseType: 'blob'\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": ["DashboardService", "http", "baseUrl", "environment", "apiUrl", "constructor", "getDashboardData", "filter", "params", "HttpParams", "minProductionRate", "undefined", "set", "toString", "maxProductionRate", "extractionYear", "fromYear", "toYear", "maintenanceTypeId", "minCost", "maxCost", "fieldId", "get", "pipe", "map", "response", "data", "exportDashboardData", "format", "responseType", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn"]
}
