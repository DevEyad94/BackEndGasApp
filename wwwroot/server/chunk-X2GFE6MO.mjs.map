{
  "version": 3,
  "sources": ["src/app/shared/components/text-input/text-input.component.ts", "src/app/shared/components/text-input/text-input.component.html", "src/app/components/admin/core/grave-form/grave-form.component.ts", "src/app/components/admin/core/grave-form/grave-form.component.html"],
  "sourcesContent": ["import { Component, OnInit, Output, EventEmitter, Input, forwardRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { LabelComponent } from '../label/label.component';\n\n@Component({\n  selector: 'app-text-input',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, TranslateModule, LabelComponent],\n  templateUrl: './text-input.component.html',\n  styleUrl: './text-input.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TextInputComponent),\n      multi: true\n    }\n  ]\n})\nexport class TextInputComponent implements OnInit, ControlValueAccessor {\n  @Input() placeholder: string = '';\n  @Input() label: string = '';\n  @Input() required: boolean = false;\n  @Input() type: string = 'text';\n  @Input() id: string = '';\n  @Input() name: string = '';\n  @Input() errorMessage: string = '';\n  @Input() showError: boolean = false;\n  @Input() inputMode:\n  | \"none\"\n  | \"text\"\n  | \"tel\"\n  | \"url\"\n  | \"email\"\n  | \"numeric\"\n  | \"decimal\"\n  | \"search\"\n  | null = \"text\";\n\n  @Input() formControl: any; // For validation in template\n  @Output() valueChanged = new EventEmitter<string>();\n\n  value: string = '';\n\n  // ControlValueAccessor implementation\n  onChange: any = () => {};\n  onTouched: any = () => {};\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  onInputChange(event: Event): void {\n    const inputElement = event.target as HTMLInputElement;\n    this.value = inputElement.value;\n    this.valueChanged.emit(this.value);\n    this.onChange(this.value);\n    this.onTouched();\n  }\n\n  // ControlValueAccessor methods\n  writeValue(value: string): void {\n    this.value = value || '';\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    // console.log(\"isDisabled\", isDisabled);\n    if (isDisabled) {\n      this.formControl.disable();\n    } else {\n      this.formControl.enable();\n    }\n  }\n}\n", "<!--\n  Available Angular form validation error types:\n  - required: Field is mandatory\n  - minlength: Text is shorter than required minimum length\n  - maxlength: Text exceeds maximum allowed length\n  - email: Invalid email format\n  - pattern: Text doesn't match required pattern\n  - min: Value is less than minimum\n  - max: Value exceeds maximum\n\n  Usage example:\n  <app-text-input\n    formControlName=\"email\"\n    [label]=\"'Email'\"\n    [required]=\"true\"\n    [formControl]=\"form.get('email')\"\n    [showError]=\"submitted && !!form.get('email')?.errors\"\n  ></app-text-input>\n-->\n\n<div class=\"relative\">\n  <!-- Input Label -->\n  <app-label [label]=\"label\" [required]=\"required\" [for]=\"id\"></app-label>\n\n  <!-- Text Input Container -->\n  <div class=\"input-container\">\n    <div class=\"text-input\">\n      <!-- Text input icon can be added here if needed -->\n      <svg\n        *ngIf=\"type === 'search'\"\n        class=\"input-icon\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      >\n        <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n        <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n      </svg>\n\n      <input\n        [type]=\"type\"\n        [id]=\"id\"\n        [name]=\"name\"\n        [placeholder]=\"placeholder | translate\"\n        class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-arabic-green focus:border-arabic-green dark:bg-gray-700 dark:text-white\"\n        [ngClass]=\"{\n          'border-red-500': formControl?.errors\n        }\"\n        (input)=\"onInputChange($event)\"\n        (blur)=\"onTouched()\"\n        [formControl]=\"formControl\"\n      />\n    </div>\n  </div>\n\n  <!-- Error Message -->\n  <div *ngIf=\"formControl\" class=\"mt-1 text-sm text-red-600\">\n    <!-- Required validation -->\n\n    <span *ngIf=\"formControl?.errors?.['required']\">\n      {{ \"VALIDATION.REQUIRED\" | translate }}\n    </span>\n\n    <!-- Min length validation -->\n    <span *ngIf=\"formControl?.errors?.['minlength']\">\n      {{ \"VALIDATION.MIN_LENGTH\" | translate: { requiredLength: formControl?.errors?.['minlength']?.requiredLength } }}\n    </span>\n\n    <!-- Max length validation -->\n    <span *ngIf=\"formControl?.errors?.['maxlength']\">\n      {{ \"VALIDATION.MAX_LENGTH\" | translate: { requiredLength: formControl?.errors?.['maxlength']?.requiredLength } }}\n    </span>\n\n    <!-- Email validation -->\n    <span *ngIf=\"formControl?.errors?.['email']\">\n      {{ \"VALIDATION.EMAIL\" | translate }}\n    </span>\n\n    <!-- Pattern validation -->\n    <span *ngIf=\"formControl?.errors?.['pattern']\">\n      {{ \"VALIDATION.PATTERN\" | translate }}\n    </span>\n\n    <!-- Min validation -->\n    <span *ngIf=\"formControl?.errors?.['min']\">\n      {{ \"VALIDATION.MIN\" | translate: { min: formControl?.errors?.['min']?.min } }}\n    </span>\n\n    <!-- Max validation -->\n    <span *ngIf=\"formControl?.errors?.['max']\">\n      {{ \"VALIDATION.MAX\" | translate: { max: formControl?.errors?.['max']?.max } }}\n    </span>\n\n    <!-- Custom validation - use custom error message if none of the above -->\n    <span\n      *ngIf=\"errorMessage && !formControl?.errors?.['required'] &&\n                !formControl?.errors?.['minlength'] && !formControl?.errors?.['maxlength'] &&\n                !formControl?.errors?.['email'] && !formControl?.errors?.['pattern'] &&\n                !formControl?.errors?.['min'] && !formControl?.errors?.['max']\"\n    >\n      {{ errorMessage | translate }}\n    </span>\n  </div>\n</div>\n", "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport {\n  FormBuilder,\n  FormGroup,\n  FormControl,\n  ControlsOf,\n} from '@ngneat/reactive-forms';\nimport { ActivatedRoute, Router, RouterModule } from '@angular/router';\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\nimport { GraveService } from '../../../../core/services/grave.service';\nimport { ZskService } from '../../../../core/services/zsk.service';\nimport { Grave } from '../../../../core/models/grave.model';\nimport {\n  GraveImagePost,\n  GravePost,\n} from '../../../../core/models/grave-post.model';\nimport {\n  ZGender,\n  zRelationship,\n  ZZone,\n  ZGraveType,\n} from '../../../../core/models/zsk.model';\nimport { GoogleMapsModule } from '@angular/google-maps';\nimport { forkJoin } from 'rxjs';\n\n// Import the GoogleMapsApiService if available\nimport { GoogleMapsApiService } from '../../../../core/services/google-maps-api.service';\nimport { DatePickerComponent } from '../../../../shared/components/date-picker/date-picker.component';\nimport { TextInputComponent } from '../../../../shared/components/text-input/text-input.component';\nimport { TextAreaComponent } from '../../../../shared/components/text-area/text-area.component';\nimport { LabelComponent } from '../../../../shared/components/label/label.component';\nimport { GenderComponent } from '../../../../shared/components/zsk/gender/gender.component';\nimport { ZoneComponent } from '../../../../shared/components/zsk/zone/zone.component';\nimport { GraveTypeComponent } from '../../../../shared/components/zsk/grave-type/grave-type.component';\nimport { log } from 'console';\nimport { ToastService } from '../../../../shared/services/toast.service';\n\n// Define form interface\ninterface GraveForm {\n  graveId: FormControl<string | undefined>;\n  refID: FormControl<string | undefined>;\n  fullNameEn: FormControl<string | undefined>;\n  fullNameAr: FormControl<string | undefined>;\n  dateOfBirth: FormControl<string | undefined>;\n  dateOfDeath: FormControl<string | undefined>;\n  description: FormControl<string | undefined>;\n  descriptionEn: FormControl<string | undefined>;\n  latitude: FormControl<number | undefined>;\n  longitude: FormControl<number | undefined>;\n  zGenderId: FormControl<string | number | undefined>;\n  zZoneId: FormControl<string | number | undefined>;\n  zGraveTypeId: FormControl<string | number | undefined>;\n}\n\n@Component({\n  selector: 'app-grave-form',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    TranslateModule,\n    GoogleMapsModule,\n    DatePickerComponent,\n    TextInputComponent,\n    TextAreaComponent,\n    LabelComponent,\n    GenderComponent,\n    ZoneComponent,\n    GraveTypeComponent,\n  ],\n  templateUrl: './grave-form.component.html',\n  styleUrls: ['./grave-form.component.scss'],\n})\nexport class GraveFormComponent implements OnInit {\n  graveForm!: FormGroup<ControlsOf<GraveForm>>;\n  isEditMode = false;\n  graveId?: string;\n  loading = false;\n  submitted = false;\n  error: string | null = null;\n  success: boolean = false;\n\n  genders: ZGender[] = [];\n  zones: ZZone[] = [];\n  relationships: zRelationship[] = [];\n  graveTypes: ZGraveType[] = [];\n\n  locationSearch: FormControl<string | undefined> = new FormControl(undefined);\n\n  // Image upload\n  selectedFile: File | null = null;\n  previewUrl: string | null = null;\n\n  // New: Death Certificate\n  selectedDeathCertificateFile: File | null = null;\n  deathCertificatePreviewUrl: string | null = null;\n\n  // New: Body Receipt Certificate\n  selectedBodyReceiptCertificateFile: File | null = null;\n  bodyReceiptCertificatePreviewUrl: string | null = null;\n\n  // Google Maps\n  center: google.maps.LatLngLiteral = { lat: 23.60929544, lng: 58.59319553 }; // Default to Riyadh\n  zoom = 20;\n  markerPosition: google.maps.LatLngLiteral = {\n    lat: 23.60929544,\n    lng: 58.59319553,\n  };\n  markerOptions: google.maps.MarkerOptions = { draggable: true };\n  mapOptions: google.maps.MapOptions = {\n    mapTypeId: 'satellite',\n    zoomControl: true,\n    scrollwheel: true,\n    disableDoubleClickZoom: false,\n    maxZoom: 20,\n    minZoom: 8,\n    mapId: 'GRAVE_MAP',\n  };\n  apiLoaded = false; // Flag to track Google Maps API loading status\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private graveService: GraveService,\n    private zskService: ZskService,\n    private mapsApiService: GoogleMapsApiService,\n    public translate: TranslateService,\n    private toast: ToastService\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm();\n    this.loadLookups();\n    this.loadGoogleMaps();\n\n    // Check if we're in edit mode\n    this.route.params.subscribe((params) => {\n      if (params['id'] && params['id'] !== 'new') {\n        this.isEditMode = true;\n        this.graveId = params['id'];\n        if (this.graveId) {\n          this.loadGraveData(this.graveId);\n        }\n      }\n    });\n  }\n\n  initForm(): void {\n    this.graveForm = this.fb.group<GraveForm>({\n      graveId: this.fb.control(undefined),\n      refID: this.fb.control({ value: undefined, disabled: true }),\n      fullNameEn: this.fb.control(undefined, [Validators.required]),\n      fullNameAr: this.fb.control(undefined, [Validators.required]),\n      dateOfBirth: this.fb.control(undefined),\n      dateOfDeath: this.fb.control(undefined, [Validators.required]),\n      description: this.fb.control(undefined),\n      descriptionEn: this.fb.control(undefined),\n      latitude: this.fb.control(this.markerPosition.lat),\n      longitude: this.fb.control(this.markerPosition.lng),\n      zGenderId: this.fb.control(undefined, [Validators.required]),\n      zZoneId: this.fb.control(undefined, [Validators.required]),\n      zGraveTypeId: this.fb.control(undefined, [Validators.required]),\n    });\n\n    this.graveForm.markAsTouched();\n    this.graveForm.markAsDirty();\n    // console.log(this.graveForm.value);\n  }\n\n  test(): void {\n    // console.log(this.graveForm.value);\n  }\n\n  loadLookups(): void {\n    this.loading = true;\n\n    forkJoin({\n      genders: this.zskService.getGender(),\n      zones: this.zskService.getZone(),\n      graveTypes: this.zskService.getGraveType(),\n    }).subscribe({\n      next: (response) => {\n        this.genders = response.genders.data;\n        this.zones = response.zones.data;\n        this.graveTypes = response.graveTypes.data;\n        this.loading = false;\n      },\n      error: (error) => {\n        console.error('Error loading lookups:', error);\n        this.error = 'Failed to load necessary data. Please try again.';\n        this.loading = false;\n\n        // Load mock data as fallback\n        this.loadMockLookups();\n      },\n    });\n  }\n\n  loadMockLookups(): void {\n    forkJoin({\n      genders: this.zskService.getGender(),\n      zones: this.zskService.getZone(),\n      relationships: this.zskService.getRelationship(),\n      graveTypes: this.zskService.getGraveType(),\n    }).subscribe({\n      next: (response) => {\n        this.genders = response.genders.data;\n        this.zones = response.zones.data;\n        this.relationships = response.relationships.data;\n        this.graveTypes = response.graveTypes.data;\n      },\n    });\n  }\n\n  loadGraveData(id: string): void {\n    this.loading = true;\n    this.graveService.getGraveById(id).subscribe({\n      next: (response) => {\n        if (response.success && response.data) {\n          const grave = response.data;\n\n          // Update form values\n          this.graveForm.patchValue({\n            refID: grave.refID,\n            fullNameEn: grave.fullNameEn,\n            fullNameAr: grave.fullNameAr,\n            dateOfBirth: grave.dateOfBirth || undefined,\n            dateOfDeath: grave.dateOfDeath || undefined,\n            description: grave.description || '',\n            descriptionEn: grave.descriptionEn || '',\n            latitude: grave.latitude,\n            longitude: grave.longitude,\n            zGenderId: grave.zGender?.zGenderId,\n            zZoneId: grave.zZone?.zZoneId,\n            zGraveTypeId: grave.zGraveType?.zGraveTypeId,\n          });\n\n          // Update map if coordinates are available\n          if (grave.latitude && grave.longitude) {\n            this.center = { lat: grave.latitude, lng: grave.longitude };\n            this.markerPosition = { lat: grave.latitude, lng: grave.longitude };\n\n            // If API is loaded, add animation to marker\n            if (this.apiLoaded && google && google.maps) {\n              this.markerOptions = {\n                ...this.markerOptions,\n                animation: google.maps.Animation.DROP,\n              };\n            }\n          }\n\n          // Set image preview if available\n          if (grave.imageURLBase64) {\n            this.previewUrl = 'data:image/jpg;base64,' + grave.imageURLBase64;\n          }\n          if (grave.deathCertificateImageURLBase64) {\n            this.deathCertificatePreviewUrl =\n              'data:image/jpg;base64,' + grave.deathCertificateImageURLBase64;\n          }\n          if (grave.bodyReceiptCertificateImageURLBase64) {\n            this.bodyReceiptCertificatePreviewUrl =\n              'data:image/jpg;base64,' + grave.bodyReceiptCertificateImageURLBase64;\n          }\n        } else {\n          this.error = 'Failed to load grave data';\n        }\n        this.loading = false;\n      },\n      error: (error) => {\n        console.error('Error loading grave:', error);\n        this.error = 'Failed to load grave data';\n        this.loading = false;\n      },\n    });\n  }\n\n  onSubmit(): void {\n    this.submitted = true;\n    this.error = null;\n\n    if (this.graveForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    const formData = this.graveForm.getRawValue() as GravePost;\n\n    // Format dates properly for API, avoiding timezone issues\n    if (formData.dateOfBirth) {\n      const birthDate = new Date(formData.dateOfBirth);\n      birthDate.setHours(12, 0, 0, 0); // Set to noon to avoid timezone shift\n      formData.dateOfBirth = birthDate.toISOString();\n    }\n    if (formData.dateOfDeath) {\n      const deathDate = new Date(formData.dateOfDeath);\n      deathDate.setHours(12, 0, 0, 0); // Set to noon to avoid timezone shift\n      formData.dateOfDeath = deathDate.toISOString();\n    }\n\n    // Add grave ID if in edit mode\n    if (this.isEditMode && this.graveId) {\n      formData.graveId = String(this.graveId);\n    }\n\n    const saveObservable = this.isEditMode\n      ? this.graveService.putGrave(formData)\n      : this.graveService.postGrave(formData);\n\n    saveObservable.subscribe({\n      next: (response) => {\n        if (response.success) {\n          this.success = true;\n\n          // Show success message with API information\n          const successMessage = this.isEditMode\n            ? this.translate.instant('GRAVE.EDIT_SUCCESS', {\n                id: response.data.graveId,\n                name:\n                  this.translate.currentLang === 'ar'\n                    ? response.data.fullNameAr\n                    : response.data.fullNameEn,\n              })\n            : this.translate.instant('GRAVE.CREATE_SUCCESS', {\n                id: response.data.graveId,\n                name:\n                  this.translate.currentLang === 'ar'\n                    ? response.data.fullNameAr\n                    : response.data.fullNameEn,\n              });\n\n          // Display success toast with grave details\n          this.toast.success(\n            successMessage,\n            this.translate.instant('COMMON.SUCCESS')\n          );\n\n          // Store the grave ID for navigation\n          const newGraveId = response.data.graveId;\n\n          // Upload image if selected\n          if (\n            this.selectedFile ||\n            this.selectedDeathCertificateFile ||\n            this.selectedBodyReceiptCertificateFile\n          ) {\n            // Create an array of promises for all uploads\n            const uploadPromises = [];\n\n            if (this.selectedFile) {\n              uploadPromises.push(this.uploadImage(response.data.graveId));\n            }\n\n            if (this.selectedDeathCertificateFile) {\n              uploadPromises.push(this.uploadDeathCertificateImage(response.data.graveId));\n            }\n\n            if (this.selectedBodyReceiptCertificateFile) {\n              uploadPromises.push(this.uploadBodyReceiptCertificateImage(response.data.graveId));\n            }\n\n            // Wait for all uploads to complete before navigating\n            Promise.all(uploadPromises).then(() => {\n              this.loading = false;\n              // Navigate to the grave detail page after all uploads are complete\n              this.router.navigate(['/grave', newGraveId]);\n            });\n          } else {\n            this.loading = false;\n            // Navigate to the grave detail page after a short delay\n            setTimeout(() => {\n              this.router.navigate(['/grave', newGraveId]);\n            }, 1000);\n          }\n        } else {\n          this.error = response.message || 'Failed to save grave';\n          this.toast.error(this.error);\n          this.loading = false;\n        }\n      },\n      error: (error) => {\n        console.error('Error saving grave:', error);\n        this.error = 'Failed to save grave data';\n        this.toast.error(this.error);\n        this.loading = false;\n      },\n    });\n  }\n\n  uploadImage(graveId: string): Promise<void> {\n    return new Promise((resolve) => {\n      if (!this.selectedFile) {\n        resolve();\n        return;\n      }\n      const imageData: GraveImagePost = {\n        graveId: graveId,\n        file: this.selectedFile,\n      };\n      this.graveService.postImg(imageData).subscribe({\n        next: () => {\n          this.toast.success(\n            this.translate.instant('GRAVE.IMAGE_UPLOAD_SUCCESS'),\n            this.translate.instant('COMMON.SUCCESS')\n          );\n          resolve();\n        },\n        error: (error) => {\n          console.error('Error uploading image:', error);\n          this.toast.warning(\n            this.translate.instant('GRAVE.IMAGE_UPLOAD_FAILED'),\n            this.translate.instant('COMMON.WARNING')\n          );\n          resolve();\n        },\n      });\n    });\n  }\n\n  uploadDeathCertificateImage(graveId: string): Promise<void> {\n    return new Promise((resolve) => {\n      if (!this.selectedDeathCertificateFile) {\n        resolve();\n        return;\n      }\n      const imageData: GraveImagePost = {\n        graveId: graveId,\n        file: this.selectedDeathCertificateFile,\n      };\n      this.graveService.postDeathCertificateImg(imageData).subscribe({\n        next: () => {\n          this.toast.success(\n            this.translate.instant(\n              'GRAVE_FORM.DEATH_CERTIFICATE_UPLOAD_SUCCESS'\n            ),\n            this.translate.instant('COMMON.SUCCESS')\n          );\n          resolve();\n        },\n        error: (error) => {\n          console.error('Error uploading death certificate:', error);\n          this.toast.warning(\n            this.translate.instant(\n              'GRAVE_FORM.DEATH_CERTIFICATE_UPLOAD_FAILED'\n            ),\n            this.translate.instant('COMMON.WARNING')\n          );\n          resolve();\n        },\n      });\n    });\n  }\n\n  uploadBodyReceiptCertificateImage(graveId: string): Promise<void> {\n    return new Promise((resolve) => {\n      if (!this.selectedBodyReceiptCertificateFile) {\n        resolve();\n        return;\n      }\n      const imageData: GraveImagePost = {\n        graveId: graveId,\n        file: this.selectedBodyReceiptCertificateFile,\n      };\n      this.graveService.postBodyReceiptCertificateImg(imageData).subscribe({\n        next: () => {\n          this.toast.success(\n            this.translate.instant(\n              'GRAVE_FORM.BODY_RECEIPT_CERTIFICATE_UPLOAD_SUCCESS'\n            ),\n            this.translate.instant('COMMON.SUCCESS')\n          );\n          resolve();\n        },\n        error: (error) => {\n          console.error('Error uploading body receipt certificate:', error);\n          this.toast.warning(\n            this.translate.instant(\n              'GRAVE_FORM.BODY_RECEIPT_CERTIFICATE_UPLOAD_FAILED'\n            ),\n            this.translate.instant('COMMON.WARNING')\n          );\n          resolve();\n        },\n      });\n    });\n  }\n\n  onFileSelected(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    if (input.files && input.files.length) {\n      const file = input.files[0];\n      if (!file.type.match('image/jpeg') && !file.type.match('image/jpg')) {\n        this.toast.error(\n          this.translate.instant('GRAVE_FORM.INVALID_IMAGE_TYPE')\n        );\n        return;\n      }\n      this.selectedFile = file;\n      this.createImagePreview();\n    }\n  }\n\n  onDeathCertificateFileSelected(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    if (input.files && input.files.length) {\n      const file = input.files[0];\n      if (!file.type.match('image/jpeg') && !file.type.match('image/jpg')) {\n        this.toast.error(\n          this.translate.instant('GRAVE_FORM.INVALID_IMAGE_TYPE')\n        );\n        return;\n      }\n      this.selectedDeathCertificateFile = file;\n      this.createDeathCertificatePreview();\n    }\n  }\n\n  onBodyReceiptCertificateFileSelected(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    if (input.files && input.files.length) {\n      const file = input.files[0];\n      if (!file.type.match('image/jpeg') && !file.type.match('image/jpg')) {\n        this.toast.error(\n          this.translate.instant('GRAVE_FORM.INVALID_IMAGE_TYPE')\n        );\n        return;\n      }\n      this.selectedBodyReceiptCertificateFile = file;\n      this.createBodyReceiptCertificatePreview();\n    }\n  }\n\n  createDeathCertificatePreview(): void {\n    if (!this.selectedDeathCertificateFile) {\n      this.deathCertificatePreviewUrl = null;\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.deathCertificatePreviewUrl = reader.result as string;\n    };\n    reader.readAsDataURL(this.selectedDeathCertificateFile);\n  }\n\n  createBodyReceiptCertificatePreview(): void {\n    if (!this.selectedBodyReceiptCertificateFile) {\n      this.bodyReceiptCertificatePreviewUrl = null;\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.bodyReceiptCertificatePreviewUrl = reader.result as string;\n    };\n    reader.readAsDataURL(this.selectedBodyReceiptCertificateFile);\n  }\n\n  createImagePreview(): void {\n    if (!this.selectedFile) {\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = () => {\n      this.previewUrl = reader.result as string;\n    };\n    reader.readAsDataURL(this.selectedFile);\n  }\n\n  onMarkerDragEnd(event: google.maps.MapMouseEvent): void {\n    if (event.latLng) {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      this.markerPosition = { lat, lng };\n      this.graveForm.patchValue({\n        latitude: lat,\n        longitude: lng,\n      });\n    }\n  }\n\n  onMapClick(event: google.maps.MapMouseEvent): void {\n    if (event.latLng) {\n      const lat = event.latLng.lat();\n      const lng = event.latLng.lng();\n      this.markerPosition = { lat, lng };\n      this.center = { lat, lng };\n      this.graveForm.patchValue({\n        latitude: lat,\n        longitude: lng,\n      });\n    }\n  }\n\n  updateMapFromInputs(): void {\n    const lat = this.graveForm.get('latitude')?.getRawValue();\n    const lng = this.graveForm.get('longitude')?.getRawValue();\n\n    if (lat && lng && !isNaN(lat) && !isNaN(lng)) {\n      const numLat = Number(lat);\n      const numLng = Number(lng);\n\n      // Update marker and center\n      this.markerPosition = { lat: numLat, lng: numLng };\n      this.center = { lat: numLat, lng: numLng };\n    }\n  }\n\n  useCurrentLocation(): void {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const lat = position.coords.latitude;\n          const lng = position.coords.longitude;\n\n          // Update marker, center and form values\n          this.markerPosition = { lat, lng };\n          this.center = { lat, lng };\n          this.graveForm.patchValue({\n            latitude: lat,\n            longitude: lng,\n          });\n        },\n        (error) => {\n          console.error('Geolocation error:', error);\n          this.error =\n            'Unable to access your location. Please check browser permissions.';\n          // Clear error after 5 seconds\n          setTimeout(() => (this.error = null), 5000);\n        },\n        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }\n      );\n    } else {\n      this.error = 'Geolocation is not supported by your browser.';\n      // Clear error after 5 seconds\n      setTimeout(() => (this.error = null), 5000);\n    }\n  }\n\n  searchLocation(query: string): void {\n    // console.log('Searching for location:', query);\n    if (!query.trim()) {\n      return;\n    }\n\n    if (!this.apiLoaded) {\n      this.error =\n        'Google Maps API is still loading. Please try again in a moment.';\n      setTimeout(() => (this.error = null), 5000);\n      return;\n    }\n\n    const geocoder = new google.maps.Geocoder();\n    geocoder\n      .geocode({ address: query })\n      .then((response) => {\n        if (response.results && response.results.length > 0) {\n          const location = response.results[0].geometry.location;\n          const lat = location.lat();\n          const lng = location.lng();\n\n          // Update marker, center and form values\n          this.markerPosition = { lat, lng };\n          this.center = { lat, lng };\n          this.graveForm.patchValue({\n            latitude: lat,\n            longitude: lng,\n          });\n\n          // Adjust zoom to better show the result\n          this.zoom = 20;\n        } else {\n          this.error = 'Location not found. Please try another search.';\n          setTimeout(() => (this.error = null), 5000);\n        }\n      })\n      .catch((error) => {\n        console.error('Geocoding error:', error);\n        this.error = 'Location search failed. Please try again.';\n        setTimeout(() => (this.error = null), 5000);\n      });\n  }\n\n  formatDate(dateString: string): string {\n    const date = new Date(dateString);\n    // Set to noon to avoid timezone issues\n    date.setHours(12, 0, 0, 0);\n    return date.toISOString().split('T')[0]; // Format as YYYY-MM-DD\n  }\n\n  resetForm(): void {\n    this.submitted = false;\n    this.graveForm.reset();\n    this.selectedFile = null;\n    this.previewUrl = null;\n\n    // Reset map\n    this.center = { lat: 23.60929544, lng: 58.59319553 };\n    this.markerPosition = { lat: 23.60929544, lng: 58.59319553 };\n    this.graveForm.patchValue({\n      latitude: this.markerPosition.lat,\n      longitude: this.markerPosition.lng,\n    });\n  }\n\n  loadGoogleMaps(): void {\n    this.mapsApiService\n      .loadApi()\n      .then(() => {\n        this.apiLoaded = true;\n        // Now that the API is loaded, we can safely use Google Maps types\n        if (google && google.maps) {\n          this.markerOptions.animation = google.maps.Animation.DROP;\n        }\n      })\n      .catch((err) => {\n        console.error('Error loading Google Maps API:', err);\n        this.error = 'Failed to load Google Maps';\n        // Clear error after 5 seconds\n        setTimeout(() => (this.error = null), 5000);\n      });\n  }\n}\n", "<div class=\"min-h-screen\">\n  <div class=\"py-12 sm:py-20\">\n    <div class=\"mx-auto max-w-5xl px-6 lg:px-8\">\n      <!-- Header Section -->\n      <div class=\"text-center mb-10\">\n        <h1 class=\"text-4xl font-bold tracking-tight text-arabic-black dark:text-gray-100 sm:text-5xl\">\n          {{\n          isEditMode\n          ? (\"GRAVE_FORM.EDIT_TITLE\" | translate)\n          : (\"GRAVE_FORM.CREATE_TITLE\" | translate)\n          }}\n        </h1>\n        <p class=\"mt-6 text-lg leading-8 text-gray-600 dark:text-gray-300\">\n          {{ \"APP.TAGLINE\" | translate }}\n        </p>\n      </div>\n\n      <!-- Loading Indicator -->\n      <div *ngIf=\"loading\" class=\"mt-12 text-center\">\n        <div\n          class=\"inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-arabic-green border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]\">\n        </div>\n        <p class=\"mt-4 text-gray-600 dark:text-gray-400\">\n          {{ \"SEARCH.LOADING\" | translate }}\n        </p>\n      </div>\n\n      <!-- Error Message -->\n      <div *ngIf=\"error\" class=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700\">\n        <p class=\"mb-0\">{{ error }}</p>\n      </div>\n\n      <!-- Success Message -->\n      <div *ngIf=\"success\" class=\"mb-6 p-4 bg-green-50 border border-green-200 rounded-lg text-green-700\">\n        <p class=\"mb-0\">\n          {{\n          isEditMode\n          ? (\"GRAVE_FORM.EDIT_SUCCESS\" | translate)\n          : (\"GRAVE_FORM.CREATE_SUCCESS\" | translate)\n          }}\n        </p>\n      </div>\n\n      <!-- Form Section -->\n      <div *ngIf=\"!loading || submitted\" class=\"bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 mb-8\">\n        <form [formGroup]=\"graveForm\" (ngSubmit)=\"onSubmit()\" class=\"space-y-6\">\n          <!-- Basic Info Section -->\n          <div>\n            <h2\n              class=\"text-xl font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 text-arabic-black dark:text-gray-100\">\n              {{ \"GRAVE_FORM.BASIC_INFO\" | translate }}\n            </h2>\n\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <!-- Grave Reference ID -->\n              <div>\n                <app-text-input id=\"refID\" name=\"refID\" [label]=\"'GRAVE_FORM.GRAVE_REF'\"\n                  [placeholder]=\"'GRAVE_FORM.AUTOGENERATE_GRAVE_REF'\"\n                  [formControl]=\"graveForm.controls.refID\"></app-text-input>\n              </div>\n\n              <!-- Gender -->\n              <div>\n                <app-gender id=\"zGenderId\" name=\"zGenderId\" [required]=\"true\"\n                  [formControl]=\"graveForm.controls.zGenderId\"></app-gender>\n              </div>\n\n              <!-- Zone -->\n              <div>\n                <app-zone id=\"zZoneId\" name=\"zZoneId\" [required]=\"true\"\n                  [formControl]=\"graveForm.controls.zZoneId\"></app-zone>\n              </div>\n\n              <!-- Grave Type -->\n              <div>\n                <app-grave-type id=\"zGraveTypeId\" name=\"zGraveTypeId\" [required]=\"true\"\n                  [formControl]=\"graveForm.controls.zGraveTypeId\"></app-grave-type>\n              </div>\n            </div>\n          </div>\n\n          <!-- Full Name Section -->\n          <div>\n            <h2\n              class=\"text-xl font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 text-arabic-black dark:text-gray-100\">\n              {{ \"GRAVE_FORM.FULL_NAME\" | translate }}\n            </h2>\n\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <!-- English Name -->\n              <div>\n                <app-text-input id=\"fullNameEn\" name=\"fullNameEn\" [label]=\"'GRAVE_FORM.NAME_EN'\" [required]=\"true\"\n                  [placeholder]=\"'GRAVE_FORM.FULLNAME_EN'\"\n                  [formControl]=\"graveForm.controls.fullNameEn\"></app-text-input>\n              </div>\n\n              <!-- Arabic Name -->\n              <div>\n                <app-text-input id=\"fullNameAr\" name=\"fullNameAr\" [label]=\"'GRAVE_FORM.NAME_AR'\" [required]=\"true\"\n                  [placeholder]=\"'GRAVE_FORM.FULLNAME_AR'\"\n                  [formControl]=\"graveForm.controls.fullNameAr\"></app-text-input>\n              </div>\n            </div>\n          </div>\n\n          <!-- Dates Section -->\n          <div>\n            <h2\n              class=\"text-xl font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 text-arabic-black dark:text-gray-100\">\n              {{ \"GRAVE_FORM.DATES\" | translate }}\n            </h2>\n\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <!-- Date of Birth -->\n              <div>\n                <app-label [label]=\"'GRAVE_FORM.DATE_OF_BIRTH' | translate\"></app-label>\n                <app-date-picker [formControl]=\"graveForm.controls.dateOfBirth\"\n                  [placeholder]=\"'DATE_PICKER.SELECT_DATE' | translate\">\n                </app-date-picker>\n              </div>\n\n              <!-- Date of Death -->\n              <div>\n                <app-label [label]=\"'GRAVE_FORM.DATE_OF_DEATH' | translate\" [required]=\"true\"></app-label>\n                <app-date-picker [required]=\"true\" [formControl]=\"graveForm.controls.dateOfDeath\"\n                  [placeholder]=\"'DATE_PICKER.SELECT_DATE' | translate\">\n                </app-date-picker>\n              </div>\n            </div>\n          </div>\n\n          <!-- Description Section -->\n          <div>\n            <h2\n              class=\"text-xl font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 text-arabic-black dark:text-gray-100\">\n              {{ \"GRAVE_FORM.DESCRIPTION\" | translate }}\n            </h2>\n\n            <div>\n              <app-text-area id=\"description\" name=\"description\" [label]=\"'GRAVE_FORM.DESCRIPTION_LABEL'\" [rows]=\"4\"\n                [formControl]=\"graveForm.controls.description\"\n                [placeholder]=\"'GRAVE_FORM.DESCRIPTION_PLACEHOLDER'\"></app-text-area>\n            </div>\n\n            <div class=\"mt-4\">\n              <app-text-area id=\"descriptionEn\" name=\"descriptionEn\" [label]=\"'GRAVE_FORM.DESCRIPTION_EN_LABEL'\"\n                [rows]=\"4\" [formControl]=\"graveForm.controls.descriptionEn\"\n                [placeholder]=\"'GRAVE_FORM.DESCRIPTION_EN_PLACEHOLDER'\"></app-text-area>\n            </div>\n          </div>\n\n          <!-- Image Upload Section -->\n          <div>\n            <h2\n              class=\"text-xl font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 text-arabic-black dark:text-gray-100\">\n              {{ \"GRAVE_FORM.IMAGE\" | translate }}\n            </h2>\n\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <label for=\"image\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  {{ \"GRAVE_FORM.UPLOAD_IMAGE\" | translate }}\n                </label>\n                <!-- Death Certificate Upload -->\n                <label for=\"deathCertificate\"\n                  class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 mt-4\">\n                  {{ \"GRAVE_FORM.UPLOAD_DEATH_CERTIFICATE\" | translate }}\n                </label>\n                <label for=\"deathCertificate\"\n                  class=\"inline-block py-2 px-4 bg-arabic-green text-white rounded-md text-sm font-semibold cursor-pointer hover:bg-opacity-90\">\n                  {{ \"GRAVE_FORM.CHOOSE_FILE\" | translate }}\n                  <input type=\"file\" id=\"deathCertificate\" (change)=\"onDeathCertificateFileSelected($event)\"\n                    accept=\".jpg,.jpeg\"\n                    class=\"hidden block w-full text-sm text-gray-500 dark:text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-arabic-green file:text-white hover:file:bg-arabic-green-dark file:cursor-pointer dark:file:bg-arabic-green dark:file:text-white\" />\n                </label>\n                <p class=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                  {{ \"GRAVE_FORM.IMAGE_REQUIREMENTS\" | translate }}\n                </p>\n                <div *ngIf=\"deathCertificatePreviewUrl\" class=\"flex justify-center items-center mt-2\">\n                  <img [src]=\"deathCertificatePreviewUrl\" alt=\"Death Certificate Preview\"\n                    class=\"max-h-40 max-w-full rounded-lg shadow-md\" />\n                </div>\n\n                <!-- Body Receipt Certificate Upload -->\n                <label for=\"bodyReceiptCertificate\"\n                  class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 mt-4\">\n                  {{ \"GRAVE_FORM.UPLOAD_BODY_RECEIPT_CERTIFICATE\" | translate }}\n                </label>\n                <label for=\"bodyReceiptCertificate\"\n                  class=\"inline-block py-2 px-4 bg-arabic-green text-white rounded-md text-sm font-semibold cursor-pointer hover:bg-opacity-90\">\n                  {{ \"GRAVE_FORM.CHOOSE_FILE\" | translate }}\n                  <input type=\"file\" id=\"bodyReceiptCertificate\" (change)=\"onBodyReceiptCertificateFileSelected($event)\"\n                    accept=\".jpg,.jpeg\"\n                    class=\"hidden block w-full text-sm text-gray-500 dark:text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-arabic-green file:text-white hover:file:bg-arabic-green-dark file:cursor-pointer dark:file:bg-arabic-green dark:file:text-white\" />\n                </label>\n                <p class=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                  {{ \"GRAVE_FORM.IMAGE_REQUIREMENTS\" | translate }}\n                </p>\n                <div *ngIf=\"bodyReceiptCertificatePreviewUrl\" class=\"flex justify-center items-center mt-2\">\n                  <img [src]=\"bodyReceiptCertificatePreviewUrl\" alt=\"Body Receipt Certificate Preview\"\n                    class=\"max-h-40 max-w-full rounded-lg shadow-md\" />\n                </div>\n\n                <label for=\"image\" class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 mt-4\">\n                  {{ \"GRAVE_FORM.GRAVE_IMAGE\" | translate }}\n                </label>\n                <label for=\"image\"\n                  class=\"inline-block py-2 px-4 bg-arabic-green text-white rounded-md text-sm font-semibold cursor-pointer hover:bg-opacity-90\">\n                  {{ \"GRAVE_FORM.CHOOSE_FILE\" | translate }}\n                  <input type=\"file\" id=\"image\" (change)=\"onFileSelected($event)\" accept=\".jpg,.jpeg\"\n                    class=\"hidden block w-full text-sm text-gray-500 dark:text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-arabic-green file:text-white hover:file:bg-arabic-green-dark file:cursor-pointer dark:file:bg-arabic-green dark:file:text-white\" />\n                </label>\n                <p class=\"mt-1 text-xs text-gray-500 dark:text-gray-400\">\n                  {{ \"GRAVE_FORM.IMAGE_REQUIREMENTS\" | translate }}\n                </p>\n                <div *ngIf=\"previewUrl\" class=\"flex justify-center items-center mt-2\">\n                  <img [src]=\"previewUrl\" alt=\"Grave Image Preview\" class=\"max-h-40 max-w-full rounded-lg shadow-md\" />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Location Section -->\n          <div>\n            <h2\n              class=\"text-xl font-semibold mb-4 pb-2 border-b border-gray-200 dark:border-gray-700 text-arabic-black dark:text-gray-100\">\n              {{ \"GRAVE_FORM.LOCATION\" | translate }}\n            </h2>\n\n            <div class=\"mb-4\">\n              <p class=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                {{ \"GRAVE_FORM.LOCATION_INSTRUCTIONS\" | translate }}\n              </p>\n\n              <!-- Location search box -->\n              <div class=\"flex items-end mb-4\">\n                <div class=\"flex-grow\">\n                  <app-text-input type=\"search\" [placeholder]=\"'GRAVE_FORM.SEARCH_LOCATION'\"\n                    [formControl]=\"locationSearch\"\n                    (keyup.enter)=\"searchLocation(locationSearch.value!)\"></app-text-input>\n                </div>\n                <button type=\"button\" (click)=\"searchLocation(locationSearch.value!)\"\n                  class=\"h-10 px-4 -ml-[1px] mt-auto mb-[8px] bg-arabic-green text-white cursor-pointer rounded-r-md hover:bg-opacity-90 focus:outline-none\">\n                  {{ \"GRAVE_FORM.SEARCH\" | translate }}\n                </button>\n              </div>\n\n              <!-- Loading indicator when API is not loaded -->\n              <div *ngIf=\"!apiLoaded\"\n                class=\"relative h-[400px] w-full rounded-lg overflow-hidden shadow-md bg-gray-100 dark:bg-gray-800 flex items-center justify-center\">\n                <div class=\"text-center\">\n                  <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-arabic-green mx-auto mb-4\"></div>\n                  <p class=\"text-gray-500 dark:text-gray-400\">\n                    {{ \"GRAVE_FORM.LOADING_MAP\" | translate }}\n                  </p>\n                </div>\n              </div>\n\n              <!-- Google Map (only shown when API is loaded) -->\n              <div *ngIf=\"apiLoaded\" class=\"relative h-[400px] w-full rounded-lg overflow-hidden shadow-md\">\n                <google-map [center]=\"center\" [zoom]=\"zoom\" [options]=\"mapOptions\" (mapClick)=\"onMapClick($event)\"\n                  height=\"400px\" width=\"100%\">\n                  <map-advanced-marker [position]=\"markerPosition\" [title]=\"'Location'\"\n                    (mapDragend)=\"onMarkerDragEnd($event)\">\n                  </map-advanced-marker>\n                </google-map>\n\n                <!-- Geolocation button -->\n                <button type=\"button\" (click)=\"useCurrentLocation()\"\n                  class=\"absolute top-4 right-4 z-10 p-2 bg-white dark:bg-gray-700 rounded-full shadow-md hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-arabic-green\"\n                  title=\"{{ 'GRAVE_FORM.USE_CURRENT_LOCATION' | translate }}\">\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6 text-arabic-green\" fill=\"none\"\n                    viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                      d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                      d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                  </svg>\n                </button>\n              </div>\n\n              <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 mt-4\">\n                <div>\n                  <app-text-input id=\"latitude\" name=\"latitude\" [label]=\"'GRAVE_FORM.LATITUDE' | translate\"\n                    [formControl]=\"graveForm.controls.latitude\" [type]=\"'number'\" (change)=\"updateMapFromInputs()\"\n                    step=\"0.000001\"></app-text-input>\n                  <!-- class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-arabic-green focus:border-arabic-green dark:bg-gray-700 dark:text-white\" -->\n                  <!-- <label\n                    for=\"latitude\"\n                    class=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\"\n                  >\n                    {{ \"GRAVE_FORM.LATITUDE\" | translate }}\n                  </label>\n                  <input\n                    type=\"number\"\n                    id=\"latitude\"\n                    formControlName=\"latitude\"\n                    (change)=\"updateMapFromInputs()\"\n                    step=\"0.000001\"\n                    class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-arabic-green focus:border-arabic-green dark:bg-gray-700 dark:text-white\"/> -->\n                </div>\n\n                <div>\n                  <app-text-input id=\"longitude\" name=\"longitude\" [label]=\"'GRAVE_FORM.LONGITUDE' | translate\"\n                    [formControl]=\"graveForm.controls.longitude\" [type]=\"'number'\" (change)=\"updateMapFromInputs()\"\n                    step=\"0.000001\"></app-text-input>\n                  <!-- class=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-arabic-green focus:border-arabic-green dark:bg-gray-700 dark:text-white\" -->\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Submit Buttons -->\n          <div class=\"flex flex-col sm:flex-row gap-4 justify-end pt-4\">\n            <!-- <button\n              type=\"button\"\n              (click)=\"test()\"\n              class=\"btn btn-outline order-1 sm:order-none\"\n            >\n              {{ \"GRAVE_FORM.TEST\" | translate }}\n            </button> -->\n            <!-- <button\n              type=\"button\"\n              (click)=\"resetForm()\"\n              class=\"btn btn-outline order-1 sm:order-none\"\n              [disabled]=\"loading\"\n            >\n              {{ \"GRAVE_FORM.RESET\" | translate }}\n            </button> -->\n\n            <a [routerLink]=\"['/grave/management']\"\n              class=\"btn btn-secondary order-2 sm:order-none text-center no-underline\" [class.opacity-50]=\"loading\"\n              [class.pointer-events-none]=\"loading\">\n              {{ \"GRAVE_FORM.CANCEL\" | translate }}\n            </a>\n\n            <button type=\"submit\"\n              class=\"btn btn-primary disabled:opacity-50 disabled:cursor-not-allowed order-3 sm:order-none cursor-pointer\"\n              [disabled]=\"loading || graveForm.invalid\">\n              <span *ngIf=\"!loading\">{{\n                isEditMode\n                ? (\"GRAVE_FORM.UPDATE\" | translate)\n                : (\"GRAVE_FORM.SAVE\" | translate)\n                }}</span>\n              <span *ngIf=\"loading\" class=\"flex items-center justify-center\">\n                <span\n                  class=\"h-4 w-4 mr-2 animate-spin rounded-full border-2 border-solid border-white border-r-transparent\"></span>\n                {{ \"GRAVE_FORM.SAVING\" | translate }}\n              </span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275text", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275pipeBind2", "\u0275\u0275pureFunction1", "_c1", "ctx_r0", "formControl", "errors", "requiredLength", "_c2", "min", "_c3", "max", "errorMessage", "\u0275\u0275template", "TextInputComponent_div_7_span_1_Template", "TextInputComponent_div_7_span_2_Template", "TextInputComponent_div_7_span_3_Template", "TextInputComponent_div_7_span_4_Template", "TextInputComponent_div_7_span_5_Template", "TextInputComponent_div_7_span_6_Template", "TextInputComponent_div_7_span_7_Template", "TextInputComponent_div_7_span_8_Template", "\u0275\u0275property", "TextInputComponent", "placeholder", "label", "required", "type", "id", "name", "showError", "inputMode", "valueChanged", "EventEmitter", "value", "onChange", "onTouched", "constructor", "ngOnInit", "onInputChange", "event", "inputElement", "target", "emit", "writeValue", "registerOnChange", "fn", "registerOnTouched", "setDisabledState", "isDisabled", "disable", "enable", "selectors", "inputs", "outputs", "features", "\u0275\u0275ProvidersFeature", "provide", "NG_VALUE_ACCESSOR", "useExisting", "forwardRef", "multi", "decls", "vars", "consts", "template", "rf", "ctx", "TextInputComponent__svg_svg_4_Template", "\u0275\u0275listener", "$event", "TextInputComponent_div_7_Template", "_c0", "CommonModule", "NgClass", "NgIf", "FormsModule", "DefaultValueAccessor", "NgControlStatus", "ReactiveFormsModule", "FormControlDirective", "TranslateModule", "TranslatePipe", "LabelComponent", "styles", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275pipeBind1", "\u0275\u0275textInterpolate", "ctx_r0", "error", "isEditMode", "\u0275\u0275property", "deathCertificatePreviewUrl", "\u0275\u0275sanitizeUrl", "bodyReceiptCertificatePreviewUrl", "previewUrl", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onMapClick", "onMarkerDragEnd", "useCurrentLocation", "center", "zoom", "mapOptions", "markerPosition", "\u0275\u0275propertyInterpolate", "_r2", "onSubmit", "onDeathCertificateFileSelected", "\u0275\u0275template", "GraveFormComponent_div_14_div_66_Template", "onBodyReceiptCertificateFileSelected", "GraveFormComponent_div_14_div_77_Template", "onFileSelected", "GraveFormComponent_div_14_div_88_Template", "searchLocation", "locationSearch", "value", "GraveFormComponent_div_14_div_103_Template", "GraveFormComponent_div_14_div_104_Template", "updateMapFromInputs", "GraveFormComponent_div_14_span_117_Template", "GraveFormComponent_div_14_span_118_Template", "graveForm", "controls", "refID", "zGenderId", "zZoneId", "zGraveTypeId", "fullNameEn", "fullNameAr", "dateOfBirth", "dateOfDeath", "description", "descriptionEn", "apiLoaded", "latitude", "longitude", "\u0275\u0275classProp", "loading", "\u0275\u0275pureFunction0", "_c0", "invalid", "GraveFormComponent", "fb", "route", "router", "graveService", "zskService", "mapsApiService", "translate", "toast", "graveId", "submitted", "success", "genders", "zones", "relationships", "graveTypes", "FormControl", "undefined", "selectedFile", "selectedDeathCertificateFile", "selectedBodyReceiptCertificateFile", "lat", "lng", "markerOptions", "draggable", "mapTypeId", "zoomControl", "scrollwheel", "disableDoubleClickZoom", "maxZoom", "minZoom", "mapId", "constructor", "ngOnInit", "initForm", "loadLookups", "loadGoogleMaps", "params", "subscribe", "loadGraveData", "group", "control", "disabled", "Validators", "required", "markAsTouched", "markAsDirty", "test", "forkJoin", "getGender", "getZone", "getGraveType", "next", "response", "data", "console", "loadMockLookups", "getRelationship", "id", "getGraveById", "grave", "patchValue", "zGender", "zZone", "zGraveType", "google", "maps", "__spreadProps", "__spreadValues", "animation", "Animation", "DROP", "imageURLBase64", "deathCertificateImageURLBase64", "bodyReceiptCertificateImageURLBase64", "formData", "getRawValue", "birthDate", "Date", "setHours", "toISOString", "deathDate", "String", "putGrave", "postGrave", "successMessage", "instant", "name", "currentLang", "newGraveId", "uploadPromises", "push", "uploadImage", "uploadDeathCertificateImage", "uploadBodyReceiptCertificateImage", "Promise", "all", "then", "navigate", "setTimeout", "message", "resolve", "imageData", "file", "postImg", "warning", "postDeathCertificateImg", "postBodyReceiptCertificateImg", "event", "input", "target", "files", "length", "type", "match", "createImagePreview", "createDeathCertificatePreview", "createBodyReceiptCertificatePreview", "reader", "FileReader", "onload", "result", "readAsDataURL", "latLng", "get", "isNaN", "numLat", "Number", "numLng", "navigator", "geolocation", "getCurrentPosition", "position", "coords", "enableHighAccuracy", "timeout", "maximumAge", "query", "trim", "Geocoder", "geocode", "address", "results", "location", "geometry", "catch", "formatDate", "dateString", "date", "split", "resetForm", "reset", "loadApi", "err", "\u0275\u0275directiveInject", "FormBuilder", "ActivatedRoute", "Router", "GraveService", "ZskService", "GoogleMapsApiService", "TranslateService", "ToastService", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "GraveFormComponent_div_11_Template", "GraveFormComponent_div_12_Template", "GraveFormComponent_div_13_Template", "GraveFormComponent_div_14_Template", "CommonModule", "NgIf", "ReactiveFormsModule", "\u0275NgNoValidate", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "FormControlDirective", "FormGroupDirective", "RouterModule", "RouterLink", "TranslateModule", "TranslatePipe", "GoogleMapsModule", "GoogleMap", "MapAdvancedMarker", "DatePickerComponent", "TextInputComponent", "TextAreaComponent", "LabelComponent", "GenderComponent", "ZoneComponent", "GraveTypeComponent", "styles"]
}
