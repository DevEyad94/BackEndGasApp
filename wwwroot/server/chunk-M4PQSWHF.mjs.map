{
  "version": 3,
  "sources": ["src/app/components/map/map-filter.component.ts", "src/app/components/map/map-filter.component.html", "src/app/shared/services/google-maps-api.service.ts", "src/app/components/map/map.component.ts", "src/app/components/map/map.component.html"],
  "sourcesContent": ["import { Component, EventEmitter, Input, OnInit, OnChanges, SimpleChanges, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { DashboardFilter } from '../../models/dashboard.model';\nimport { TextInputComponent } from '../../shared/components/text-input/text-input.component';\nimport { ZskSelectComponent } from '../../shared/components/zsk/zsk-select.component';\n\n@Component({\n  selector: 'app-map-filter',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TextInputComponent,\n    ZskSelectComponent\n  ],\n  templateUrl: './map-filter.component.html',\n  styleUrls: ['./map-filter.component.scss']\n})\nexport class MapFilterComponent implements OnInit, OnChanges {\n  @Output() filtersChanged = new EventEmitter<DashboardFilter>();\n  @Input() maintenanceTypes: { id: number, name: string }[] = [];\n  @Input() fields: { value: number, label: string }[] = [];\n\n  maintenanceTypeOptions: { value: any, label: string }[] = [];\n  fieldOptions: { value: any, label: string }[] = [];\n  yearOptions: { value: any, label: string }[] = [];\n\n  filterForm!: FormGroup;\n  years: number[] = [];\n  showAdvancedFilters = false;\n\n  constructor(private fb: FormBuilder) {\n    // Generate list of years for dropdown (last 30 years)\n    const currentYear = new Date().getFullYear();\n    for (let i = 0; i < 30; i++) {\n      this.years.push(currentYear - i);\n    }\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n    this.prepareYearOptions();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['maintenanceTypes'] && this.maintenanceTypes) {\n      this.prepareMaintenanceTypeOptions();\n    }\n\n    if (changes['fields'] && this.fields) {\n      this.prepareFieldOptions();\n    }\n  }\n\n  prepareYearOptions(): void {\n    // Convert years to options format\n    this.yearOptions = this.years.map(year => ({\n      value: year,\n      label: year.toString()\n    }));\n  }\n\n  prepareMaintenanceTypeOptions(): void {\n    console.log('Setting maintenance type options:', this.maintenanceTypes);\n    this.maintenanceTypeOptions = this.maintenanceTypes.map(type => ({\n      value: type.id,\n      label: type.name\n    }));\n  }\n\n  prepareFieldOptions(): void {\n    console.log('Setting field options:', this.fields);\n    this.fieldOptions = this.fields;\n  }\n\n  initForm(): void {\n    this.filterForm = this.fb.group({\n      minProductionRate: [null],\n      maxProductionRate: [null],\n      extractionYear: [null],\n      fromYear: [null],\n      toYear: [null],\n      maintenanceTypeId: [null],\n      minCost: [null],\n      maxCost: [null],\n      fieldId: [null]\n    });\n\n    // Subscribe to form value changes\n    this.filterForm.valueChanges.subscribe(values => {\n      this.filtersChanged.emit(values);\n    });\n  }\n\n  toggleAdvancedFilters(): void {\n    this.showAdvancedFilters = !this.showAdvancedFilters;\n  }\n\n  clearFilters(): void {\n    this.filterForm.reset();\n  }\n}\n", "<div class=\"bg-white dark:bg-gray-700 rounded-lg shadow p-4 mb-4\">\n  <div class=\"flex justify-between items-center mb-4\">\n    <h2 class=\"text-xl font-semibold text-gray-800 dark:text-white\">Filter Fields</h2>\n    <div>\n      <button type=\"button\" (click)=\"toggleAdvancedFilters()\" class=\"text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 mr-2\">\n        {{ showAdvancedFilters ? 'Hide Advanced' : 'Show Advanced' }}\n      </button>\n      <button type=\"button\" (click)=\"clearFilters()\" class=\"text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300\">\n        Clear Filters\n      </button>\n    </div>\n  </div>\n\n  <form [formGroup]=\"filterForm\" class=\"space-y-4\">\n    <!-- Basic Filters Row -->\n    <div class=\"grid md:grid-cols-2 gap-4\">\n      <!-- Production Rate Min/Max Group -->\n      <div class=\"grid grid-cols-2 gap-2\">\n        <app-text-input\n          formControlName=\"minProductionRate\"\n          type=\"number\"\n          label=\"Min Production Rate\"\n          placeholder=\"Minimum rate\"\n          id=\"minProductionRate\"\n          name=\"minProductionRate\"\n          inputMode=\"numeric\"\n        ></app-text-input>\n\n        <app-text-input\n          formControlName=\"maxProductionRate\"\n          type=\"number\"\n          label=\"Max Production Rate\"\n          placeholder=\"Maximum rate\"\n          id=\"maxProductionRate\"\n          name=\"maxProductionRate\"\n          inputMode=\"numeric\"\n        ></app-text-input>\n      </div>\n\n      <!-- Single Year Filter -->\n      <div class=\"grid grid-cols-2 gap-2\">\n        <app-zsk-select\n          formControlName=\"extractionYear\"\n          label=\"Extraction Year\"\n          id=\"extractionYear\"\n          name=\"extractionYear\"\n          placeholder=\"All Years\"\n          [options]=\"yearOptions\"\n        ></app-zsk-select>\n\n        <app-zsk-select\n          formControlName=\"fieldId\"\n          label=\"Field\"\n          id=\"fieldId\"\n          name=\"fieldId\"\n          placeholder=\"All Fields\"\n          [options]=\"fieldOptions\"\n        ></app-zsk-select>\n      </div>\n    </div>\n\n    <!-- Advanced Filters Section -->\n    <div *ngIf=\"showAdvancedFilters\" class=\"space-y-4\">\n      <div class=\"grid md:grid-cols-2 gap-4\">\n        <!-- Year Range -->\n        <div class=\"grid grid-cols-2 gap-2\">\n          <app-zsk-select\n            formControlName=\"fromYear\"\n            label=\"From Year\"\n            id=\"fromYear\"\n            name=\"fromYear\"\n            placeholder=\"Any Year\"\n            [options]=\"yearOptions\"\n          ></app-zsk-select>\n\n          <app-zsk-select\n            formControlName=\"toYear\"\n            label=\"To Year\"\n            id=\"toYear\"\n            name=\"toYear\"\n            placeholder=\"Any Year\"\n            [options]=\"yearOptions\"\n          ></app-zsk-select>\n        </div>\n\n        <!-- Maintenance Type -->\n        <div class=\"grid grid-cols-2 gap-2\">\n          <app-zsk-select\n            formControlName=\"maintenanceTypeId\"\n            label=\"Maintenance Type\"\n            id=\"maintenanceTypeId\"\n            name=\"maintenanceTypeId\"\n            placeholder=\"All Types\"\n            [options]=\"maintenanceTypeOptions\"\n          ></app-zsk-select>\n\n          <div></div> <!-- Empty placeholder for grid alignment -->\n        </div>\n      </div>\n\n      <div class=\"grid md:grid-cols-2 gap-4\">\n        <!-- Maintenance Cost -->\n        <div class=\"grid grid-cols-2 gap-2\">\n          <app-text-input\n            formControlName=\"minCost\"\n            type=\"number\"\n            label=\"Min Cost\"\n            placeholder=\"Minimum cost\"\n            id=\"minCost\"\n            name=\"minCost\"\n            inputMode=\"numeric\"\n          ></app-text-input>\n\n          <app-text-input\n            formControlName=\"maxCost\"\n            type=\"number\"\n            label=\"Max Cost\"\n            placeholder=\"Maximum cost\"\n            id=\"maxCost\"\n            name=\"maxCost\"\n            inputMode=\"numeric\"\n          ></app-text-input>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n", "import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { environment } from '../../../environments/environment';\n\n// Define a custom interface for the window object with our callback\ninterface CustomWindow extends Window {\n  googleMapsApiLoaded?: () => void;\n  google?: {\n    maps?: any;\n  };\n  [key: string]: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GoogleMapsApiService {\n  private readonly API_KEY = environment.googleMapsApiKey;\n  private isLoaded = false;\n  private loadingPromise: Promise<void> | null = null;\n  private readonly isBrowser: boolean;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object) {\n    this.isBrowser = isPlatformBrowser(this.platformId);\n  }\n\n  loadApi(): Promise<void> {\n    // Skip loading the API on the server\n    if (!this.isBrowser) {\n      return Promise.resolve();\n    }\n\n    if (this.isLoaded) {\n      return Promise.resolve();\n    }\n\n    if (this.loadingPromise) {\n      return this.loadingPromise;\n    }\n\n    this.loadingPromise = new Promise<void>((resolve, reject) => {\n      const customWindow = window as CustomWindow;\n\n      // If Google Maps API is already loaded, resolve immediately\n      if (customWindow.google && customWindow.google.maps) {\n        this.isLoaded = true;\n        resolve();\n        return;\n      }\n\n      // Create a callback for when the API loads\n      const callbackName = 'googleMapsApiLoaded';\n      customWindow[callbackName] = () => {\n        this.isLoaded = true;\n        resolve();\n        delete customWindow[callbackName];\n      };\n\n      // Add the script tag to the document\n      const script = document.createElement('script');\n      // Explicitly set async and defer attributes before setting src\n      script.async = true;\n      script.defer = true;\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${this.API_KEY}&callback=${callbackName}&libraries=places,marker&loading=async`;\n      script.onerror = (error) => {\n        reject(new Error('Failed to load Google Maps API: ' + error));\n      };\n\n      document.head.appendChild(script);\n    });\n\n    return this.loadingPromise;\n  }\n}\n", "import { Component, OnInit, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ZskService } from '../../shared/services/zsk.service';\nimport { GasField } from '../../models/gas-field.model';\nimport { environment } from '../../../environments/environment';\nimport { MapFilterComponent } from './map-filter.component';\nimport { DashboardService } from '../../shared/services/dashboard.service';\nimport { DashboardFilter, FieldData } from '../../models/dashboard.model';\nimport { Router } from '@angular/router';\nimport { forkJoin } from 'rxjs';\nimport { MaintenanceType } from '../../models/maintenance-type.model';\nimport { GoogleMapsApiService } from '../../shared/services/google-maps-api.service';\n\ndeclare const google: any;\n\n// Extended GasField interface with dashboard data\ninterface ExtendedGasField extends GasField {\n  productionRate?: number;\n  extractionYear?: number;\n  maintenanceType?: string;\n  maintenanceCost?: number;\n}\n\n@Component({\n  selector: 'app-map',\n  standalone: true,\n  imports: [CommonModule, MapFilterComponent],\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class MapComponent implements OnInit, AfterViewInit {\n  @ViewChild('mapContainer', { static: false }) mapElement!: ElementRef;\n\n  fields: GasField[] = [];\n  map: any;\n  markers: any[] = [];\n\n  // Dashboard data\n  dashboardFields: FieldData[] = [];\n  maintenanceTypes: { id: number, name: string }[] = [];\n  fieldOptions: { value: number, label: string }[] = [];\n  currentFilter: DashboardFilter = {};\n  isDataLoaded = false;\n\n  // Add zoom level property\n  currentZoom = 7;\n\n  constructor(\n    private lookupService: ZskService,\n    private dashboardService: DashboardService,\n    private router: Router,\n    private googleMapsApiService: GoogleMapsApiService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadInitialData();\n  }\n\n  loadInitialData(): void {\n    forkJoin({\n      fields: this.lookupService.getFields(),\n      maintenanceTypes: this.lookupService.getMaintenanceTypes()\n    }).subscribe({\n      next: (result) => {\n        console.log('Loaded maintenance types:', result.maintenanceTypes);\n\n        this.fields = result.fields;\n\n        // Prepare field options for the filter\n        this.fieldOptions = this.fields.map(field => ({\n          value: field.zFieldId,\n          label: field.name\n        }));\n\n        // Set maintenance types\n        this.maintenanceTypes = result.maintenanceTypes.map(type => ({\n          id: type.zMaintenanceTypeId,\n          name: type.name\n        }));\n\n        console.log('Mapped maintenance types:', this.maintenanceTypes);\n\n        // Mark data as loaded\n        this.isDataLoaded = true;\n\n        // Load dashboard data after fields are loaded\n        this.loadDashboardData();\n\n        // No need to initialize map here as it's handled in ngAfterViewInit\n      },\n      error: (error) => {\n        console.error('Error loading initial data:', error);\n      }\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Load Google Maps API using the service\n    this.googleMapsApiService.loadApi()\n      .then(() => {\n        this.initializeMap();\n      })\n      .catch(error => {\n        console.error('Error loading Google Maps API:', error);\n      });\n  }\n\n  loadDashboardData(filter: DashboardFilter = {}): void {\n    this.currentFilter = filter;\n    this.dashboardService.getDashboardData(filter).subscribe({\n      next: (data) => {\n        this.dashboardFields = data.fieldData;\n        if (this.map) {\n          this.addMarkers();\n        }\n      },\n      error: (error) => {\n        console.error('Error fetching dashboard data:', error);\n      }\n    });\n  }\n\n  onFiltersChanged(filters: DashboardFilter): void {\n    this.loadDashboardData(filters);\n  }\n\n  initializeMap(): void {\n    if (!this.mapElement) {\n      setTimeout(() => this.initializeMap(), 100);\n      return;\n    }\n\n    // Make sure Google Maps API is available\n    if (!(window as any).google || !(window as any).google.maps) {\n      console.warn('Google Maps API not loaded yet, retrying...');\n      setTimeout(() => this.initializeMap(), 300);\n      return;\n    }\n\n    // Default map center (can be set to average of all fields if available)\n    const defaultCenter = { lat: 23.6150, lng: 58.5912 }; // Oman coordinates\n\n    this.map = new google.maps.Map(this.mapElement.nativeElement, {\n      center: defaultCenter,\n      zoom: this.currentZoom,\n      mapTypeId: 'terrain',\n      styles: this.getMapStyles(),\n      zoomControl: true,\n      zoomControlOptions: {\n        position: google.maps.ControlPosition.RIGHT_BOTTOM\n      },\n      fullscreenControl: true,\n      streetViewControl: false,\n      mapTypeControl: true,\n      mapTypeControlOptions: {\n        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,\n        position: google.maps.ControlPosition.TOP_RIGHT\n      }\n    });\n\n    // Add zoom change listener to keep our current zoom in sync\n    this.map.addListener('zoom_changed', () => {\n      this.currentZoom = this.map.getZoom();\n    });\n\n    if (this.fields.length > 0 || this.dashboardFields.length > 0) {\n      this.addMarkers();\n    }\n  }\n\n  addMarkers(): void {\n    // Clear existing markers\n    this.markers.forEach(marker => marker.setMap(null));\n    this.markers = [];\n\n    const bounds = new google.maps.LatLngBounds();\n\n    // Use dashboard fields if available (filtered data), otherwise use basic fields\n    const fieldsToDisplay: ExtendedGasField[] = this.dashboardFields.length > 0 ?\n      this.dashboardFields.map(f => ({\n        zFieldId: f.fieldId,\n        name: f.fieldName,\n        latitude: f.latitude,\n        longitude: f.longitude,\n        productionRate: f.productionRate,\n        extractionYear: f.extractionYear,\n        maintenanceType: f.maintenanceType,\n        maintenanceCost: f.maintenanceCost\n      })) :\n      this.fields;\n\n    fieldsToDisplay.forEach(field => {\n      if (field.latitude && field.longitude) {\n        const position = { lat: field.latitude, lng: field.longitude };\n\n        // Create marker\n        const marker = new google.maps.Marker({\n          position,\n          map: this.map,\n          title: field.name,\n          animation: google.maps.Animation.DROP,\n          icon: {\n            path: google.maps.SymbolPath.CIRCLE,\n            scale: 8,\n            fillColor: '#4CAF50',\n            fillOpacity: 0.8,\n            strokeWeight: 2,\n            strokeColor: '#FFFFFF'\n          }\n        });\n\n        // Create content for info window\n        let infoContent = `\n          <div class=\"p-2\">\n            <h3 class=\"font-bold text-lg\">${field.name}</h3>\n            <p>Field ID: ${field.zFieldId}</p>\n            <p>Coordinates: ${field.latitude.toFixed(6)}, ${field.longitude.toFixed(6)}</p>`;\n\n        // Add additional info if available from dashboard data\n        if (field.productionRate !== undefined) {\n          infoContent += `\n            <p>Production Rate: ${field.productionRate} m³/day</p>\n            <p>Extraction Year: ${field.extractionYear}</p>\n            <p>Maintenance Type: ${field.maintenanceType}</p>\n            <p>Maintenance Cost: $${field.maintenanceCost?.toFixed(2)}</p>\n            <div class=\"mt-2 text-center\">\n              <button class=\"view-details-btn bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded\"\n                      data-field-id=\"${field.zFieldId}\">\n                View Details\n              </button>\n            </div>`;\n        }\n\n        infoContent += `</div>`;\n\n        // Info window setup\n        const infoWindow = new google.maps.InfoWindow({\n          content: infoContent\n        });\n\n        // Add click listener to marker\n        marker.addListener('click', () => {\n          infoWindow.open(this.map, marker);\n\n          // Add event listener for the \"View Details\" button after the info window is opened\n          google.maps.event.addListener(infoWindow, 'domready', () => {\n            const detailsButton = document.querySelector('.view-details-btn');\n            if (detailsButton) {\n              detailsButton.addEventListener('click', (event) => {\n                const fieldId = (event.target as HTMLElement).getAttribute('data-field-id');\n                this.navigateToFieldDetails(Number(fieldId));\n              });\n            }\n          });\n        });\n\n        this.markers.push(marker);\n        bounds.extend(position);\n      }\n    });\n\n    // Adjust map to show all markers\n    if (this.markers.length > 0) {\n      this.map.fitBounds(bounds);\n    }\n  }\n\n  navigateToFieldDetails(fieldId: number): void {\n    this.router.navigate(['/field', fieldId]);\n  }\n\n  getMapStyles(): any[] {\n    // Custom map styles for better visibility\n    return [\n      {\n        featureType: 'water',\n        elementType: 'geometry',\n        stylers: [\n          { color: '#e9e9e9' },\n          { lightness: 17 }\n        ]\n      },\n      {\n        featureType: 'landscape',\n        elementType: 'geometry',\n        stylers: [\n          { color: '#f5f5f5' },\n          { lightness: 20 }\n        ]\n      },\n      {\n        featureType: 'poi',\n        elementType: 'geometry',\n        stylers: [\n          { color: '#f5f5f5' },\n          { lightness: 21 }\n        ]\n      },\n      {\n        featureType: 'administrative',\n        elementType: 'labels.text.fill',\n        stylers: [\n          { color: '#333333' }\n        ]\n      }\n    ];\n  }\n\n  zoomIn(): void {\n    if (this.map) {\n      this.currentZoom = Math.min(this.currentZoom + 1, 20);\n      this.map.setZoom(this.currentZoom);\n    }\n  }\n\n  zoomOut(): void {\n    if (this.map) {\n      this.currentZoom = Math.max(this.currentZoom - 1, 1);\n      this.map.setZoom(this.currentZoom);\n    }\n  }\n\n  resetZoom(): void {\n    if (this.map) {\n      this.currentZoom = 7;\n      this.map.setZoom(this.currentZoom);\n\n      // If we have markers, center the map to show all of them\n      if (this.markers.length > 0) {\n        const bounds = new google.maps.LatLngBounds();\n        this.markers.forEach(marker => {\n          bounds.extend(marker.getPosition());\n        });\n        this.map.fitBounds(bounds);\n      }\n    }\n  }\n}\n", "<div class=\"p-4 bg-gray-50 dark:bg-gray-800 min-h-screen\">\n  <div class=\"mb-4\">\n    <h1 class=\"text-3xl font-bold text-gray-900 dark:text-white\">Gas Condensate Field Locations</h1>\n    <p class=\"mt-2 text-gray-600 dark:text-gray-300\">Interactive map showing all gas condensate field locations.</p>\n  </div>\n\n  <!-- Map Filters -->\n  <app-map-filter *ngIf=\"isDataLoaded\"\n    [maintenanceTypes]=\"maintenanceTypes\"\n    [fields]=\"fieldOptions\"\n    (filtersChanged)=\"onFiltersChanged($event)\">\n  </app-map-filter>\n\n  <div class=\"bg-white dark:bg-gray-700 rounded-lg shadow overflow-hidden relative\">\n    <div #mapContainer class=\"w-full h-[75vh] z-0\"></div>\n\n    <!-- Custom Zoom Controls -->\n    <!-- <div class=\"absolute top-4 left-4 flex flex-col bg-white dark:bg-gray-800 shadow-md rounded-lg z-10\">\n      <button (click)=\"zoomIn()\" class=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 border-b border-gray-200 dark:border-gray-600 text-gray-700 dark:text-white\" title=\"Zoom In\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n        </svg>\n      </button>\n      <button (click)=\"zoomOut()\" class=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 border-b border-gray-200 dark:border-gray-600 text-gray-700 dark:text-white\" title=\"Zoom Out\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M18 12H6\" />\n        </svg>\n      </button>\n      <button (click)=\"resetZoom()\" class=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-white\" title=\"Reset View\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5v-4m0 4h-4m4 0l-5-5\" />\n        </svg>\n      </button>\n    </div> -->\n\n    <!-- Zoom Level Indicator -->\n    <!-- <div class=\"absolute bottom-4 left-4 bg-white dark:bg-gray-800 py-1 px-3 rounded-lg shadow-md z-10 text-gray-700 dark:text-white font-medium\">\n      Zoom: {{ currentZoom }}\n    </div> -->\n  </div>\n\n  <div class=\"mt-6 bg-white dark:bg-gray-700 p-4 rounded-lg shadow\">\n    <h2 class=\"text-xl font-semibold text-gray-800 dark:text-white mb-4\">Field Information</h2>\n\n    <div class=\"overflow-x-auto\">\n      <!-- Dashboard Fields Table (when available) -->\n      <table *ngIf=\"dashboardFields.length > 0\" class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-600\">\n        <thead class=\"bg-gray-50 dark:bg-gray-800\">\n          <tr>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Field ID</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Name</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Latitude</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Longitude</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n          </tr>\n        </thead>\n        <tbody class=\"bg-white dark:bg-gray-700 divide-y divide-gray-200 dark:divide-gray-600\">\n          <tr *ngFor=\"let field of dashboardFields\" class=\"hover:bg-gray-100 dark:hover:bg-gray-600\">\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">{{ field.fieldId }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">{{ field.fieldName }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">{{ field.latitude.toFixed(6) }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">{{ field.longitude.toFixed(6) }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">\n              <button\n                (click)=\"navigateToFieldDetails(field.fieldId)\"\n                class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded\">\n                View Details\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <!-- Default Fields Table (when no dashboard data) -->\n      <table *ngIf=\"dashboardFields.length === 0\" class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-600\">\n        <thead class=\"bg-gray-50 dark:bg-gray-800\">\n          <tr>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Field ID</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Name</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Latitude</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Longitude</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Actions</th>\n          </tr>\n        </thead>\n        <tbody class=\"bg-white dark:bg-gray-700 divide-y divide-gray-200 dark:divide-gray-600\">\n          <tr *ngFor=\"let field of fields\" class=\"hover:bg-gray-100 dark:hover:bg-gray-600\">\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">{{ field.zFieldId }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">{{ field.name }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">{{ field.latitude.toFixed(6) }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">{{ field.longitude.toFixed(6) }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">\n              <button\n                (click)=\"navigateToFieldDetails(field.zFieldId)\"\n                class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded\">\n                View Details\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n"],
  "mappings": "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",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275property", "ctx_r0", "yearOptions", "maintenanceTypeOptions", "MapFilterComponent", "fb", "filtersChanged", "EventEmitter", "maintenanceTypes", "fields", "fieldOptions", "filterForm", "years", "showAdvancedFilters", "constructor", "currentYear", "Date", "getFullYear", "i", "push", "ngOnInit", "initForm", "prepareYearOptions", "ngOnChanges", "changes", "prepareMaintenanceTypeOptions", "prepareFieldOptions", "map", "year", "value", "label", "toString", "console", "log", "type", "id", "name", "group", "minProductionRate", "maxProductionRate", "extractionYear", "fromYear", "toYear", "maintenanceTypeId", "minCost", "maxCost", "fieldId", "valueChanges", "subscribe", "values", "emit", "toggleAdvancedFilters", "clearFilters", "reset", "\u0275\u0275directiveInject", "FormBuilder", "selectors", "inputs", "outputs", "features", "\u0275\u0275NgOnChangesFeature", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275text", "\u0275\u0275listener", "\u0275\u0275template", "MapFilterComponent_div_17_Template", "\u0275\u0275textInterpolate1", "CommonModule", "NgIf", "FormsModule", "\u0275NgNoValidate", "NgControlStatus", "NgControlStatusGroup", "ReactiveFormsModule", "FormGroupDirective", "FormControlName", "TextInputComponent", "ZskSelectComponent", "styles", "GoogleMapsApiService", "platformId", "API_KEY", "environment", "googleMapsApiKey", "isLoaded", "loadingPromise", "isBrowser", "constructor", "isPlatformBrowser", "loadApi", "Promise", "resolve", "reject", "customWindow", "window", "google", "maps", "callbackName", "script", "document", "createElement", "async", "defer", "src", "onerror", "error", "Error", "head", "appendChild", "\u0275\u0275inject", "PLATFORM_ID", "factory", "\u0275fac", "providedIn", "\u0275\u0275elementStart", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r1", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "onFiltersChanged", "\u0275\u0275elementEnd", "\u0275\u0275property", "maintenanceTypes", "fieldOptions", "\u0275\u0275text", "field_r4", "_r3", "$implicit", "navigateToFieldDetails", "fieldId", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "fieldName", "latitude", "toFixed", "longitude", "\u0275\u0275template", "MapComponent_table_14_tr_14_Template", "dashboardFields", "field_r6", "_r5", "zFieldId", "name", "MapComponent_table_15_tr_14_Template", "fields", "MapComponent", "lookupService", "dashboardService", "router", "googleMapsApiService", "mapElement", "map", "markers", "currentFilter", "isDataLoaded", "currentZoom", "constructor", "ngOnInit", "loadInitialData", "forkJoin", "getFields", "getMaintenanceTypes", "subscribe", "next", "result", "console", "log", "field", "value", "label", "type", "id", "zMaintenanceTypeId", "loadDashboardData", "error", "ngAfterViewInit", "loadApi", "then", "initializeMap", "catch", "filter", "getDashboardData", "data", "fieldData", "addMarkers", "filters", "setTimeout", "window", "google", "maps", "warn", "defaultCenter", "lat", "lng", "Map", "nativeElement", "center", "zoom", "mapTypeId", "styles", "getMapStyles", "zoomControl", "zoomControlOptions", "position", "ControlPosition", "RIGHT_BOTTOM", "fullscreenControl", "streetViewControl", "mapTypeControl", "mapTypeControlOptions", "style", "MapTypeControlStyle", "DROPDOWN_MENU", "TOP_RIGHT", "addListener", "getZoom", "length", "forEach", "marker", "setMap", "bounds", "LatLngBounds", "f", "productionRate", "extractionYear", "maintenanceType", "maintenanceCost", "Marker", "title", "animation", "Animation", "DROP", "icon", "path", "SymbolPath", "CIRCLE", "scale", "fillColor", "fillOpacity", "strokeWeight", "strokeColor", "infoContent", "undefined", "infoWindow", "InfoWindow", "content", "open", "event", "detailsButton", "document", "querySelector", "addEventListener", "target", "getAttribute", "Number", "push", "extend", "fitBounds", "navigate", "featureType", "elementType", "stylers", "color", "lightness", "zoomIn", "Math", "min", "setZoom", "zoomOut", "max", "resetZoom", "getPosition", "\u0275\u0275directiveInject", "ZskService", "DashboardService", "Router", "GoogleMapsApiService", "selectors", "viewQuery", "rf", "ctx", "MapComponent_app_map_filter_6_Template", "\u0275\u0275element", "MapComponent_table_14_Template", "MapComponent_table_15_Template", "CommonModule", "NgForOf", "NgIf", "MapFilterComponent"]
}
