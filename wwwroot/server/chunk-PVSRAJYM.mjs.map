{"version":3,"sources":["node_modules/file-saver/dist/FileSaver.min.js","src/app/components/dashboard/dashboard.component.ts","src/app/components/dashboard/dashboard.component.html"],"sourcesContent":["(function (a, b) {\n  if (\"function\" == typeof define && define.amd) define([], b);else if (\"undefined\" != typeof exports) b();else {\n    b(), a.FileSaver = {\n      exports: {}\n    }.exports;\n  }\n})(this, function () {\n  \"use strict\";\n\n  function b(a, b) {\n    return \"undefined\" == typeof b ? b = {\n      autoBom: !1\n    } : \"object\" != typeof b && (console.warn(\"Deprecated: Expected third argument to be a object\"), b = {\n      autoBom: !b\n    }), b.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type) ? new Blob([\"\\uFEFF\", a], {\n      type: a.type\n    }) : a;\n  }\n  function c(a, b, c) {\n    var d = new XMLHttpRequest();\n    d.open(\"GET\", a), d.responseType = \"blob\", d.onload = function () {\n      g(d.response, b, c);\n    }, d.onerror = function () {\n      console.error(\"could not download file\");\n    }, d.send();\n  }\n  function d(a) {\n    var b = new XMLHttpRequest();\n    b.open(\"HEAD\", a, !1);\n    try {\n      b.send();\n    } catch (a) {}\n    return 200 <= b.status && 299 >= b.status;\n  }\n  function e(a) {\n    try {\n      a.dispatchEvent(new MouseEvent(\"click\"));\n    } catch (c) {\n      var b = document.createEvent(\"MouseEvents\");\n      b.initMouseEvent(\"click\", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b);\n    }\n  }\n  var f = \"object\" == typeof window && window.window === window ? window : \"object\" == typeof self && self.self === self ? self : \"object\" == typeof global && global.global === global ? global : void 0,\n    a = f.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent),\n    g = f.saveAs || (\"object\" != typeof window || window !== f ? function () {} : \"download\" in HTMLAnchorElement.prototype && !a ? function (b, g, h) {\n      var i = f.URL || f.webkitURL,\n        j = document.createElement(\"a\");\n      g = g || b.name || \"download\", j.download = g, j.rel = \"noopener\", \"string\" == typeof b ? (j.href = b, j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, j.target = \"_blank\")) : (j.href = i.createObjectURL(b), setTimeout(function () {\n        i.revokeObjectURL(j.href);\n      }, 4E4), setTimeout(function () {\n        e(j);\n      }, 0));\n    } : \"msSaveOrOpenBlob\" in navigator ? function (f, g, h) {\n      if (g = g || f.name || \"download\", \"string\" != typeof f) navigator.msSaveOrOpenBlob(b(f, h), g);else if (d(f)) c(f, g, h);else {\n        var i = document.createElement(\"a\");\n        i.href = f, i.target = \"_blank\", setTimeout(function () {\n          e(i);\n        });\n      }\n    } : function (b, d, e, g) {\n      if (g = g || open(\"\", \"_blank\"), g && (g.document.title = g.document.body.innerText = \"downloading...\"), \"string\" == typeof b) return c(b, d, e);\n      var h = \"application/octet-stream\" === b.type,\n        i = /constructor/i.test(f.HTMLElement) || f.safari,\n        j = /CriOS\\/[\\d]+/.test(navigator.userAgent);\n      if ((j || h && i || a) && \"undefined\" != typeof FileReader) {\n        var k = new FileReader();\n        k.onloadend = function () {\n          var a = k.result;\n          a = j ? a : a.replace(/^data:[^;]*;/, \"data:attachment/file;\"), g ? g.location.href = a : location = a, g = null;\n        }, k.readAsDataURL(b);\n      } else {\n        var l = f.URL || f.webkitURL,\n          m = l.createObjectURL(b);\n        g ? g.location = m : location.href = m, g = null, setTimeout(function () {\n          l.revokeObjectURL(m);\n        }, 4E4);\n      }\n    });\n  f.saveAs = g.saveAs = g, \"undefined\" != typeof module && (module.exports = g);\n});\n\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { forkJoin } from 'rxjs';\nimport { ZskService } from '../../shared/services/zsk.service';\nimport { MaintenanceType } from '../../models/maintenance-type.model';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { DashboardService } from '../../shared/services/dashboard.service';\nimport { DashboardFilter, DashboardResponse } from '../../models/dashboard.model';\nimport { NgxEchartsModule } from 'ngx-echarts';\nimport type { EChartsOption } from 'echarts';\nimport { TextInputComponent } from '../../shared/components/text-input/text-input.component';\nimport { ZskSelectComponent } from '../../shared/components/zsk/zsk-select.component';\nimport { GasField } from '../../models/gas-field.model';\nimport { saveAs } from 'file-saver';\n\n@Component({\n  selector: 'app-dashboard',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgxEchartsModule,\n    TextInputComponent,\n    ZskSelectComponent\n  ],\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  filterForm!: FormGroup;\n  maintenanceTypes: MaintenanceType[] = [];\n  maintenanceTypeOptions: { value: any, label: string }[] = [];\n  fields: GasField[] = [];\n  fieldOptions: { value: any, label: string }[] = [];\n\n  // Dashboard data\n  dashboardData?: DashboardResponse;\n\n  // ECharts options\n  productionChartOption: EChartsOption = {};\n  maintenanceCostChartOption: EChartsOption = {};\n\n  // Stats\n  totalProductionRate: number = 0;\n  totalMaintenanceCost: number = 0;\n  fieldCount: number = 0;\n\n  // Export options\n  showExportModal = false;\n  exportFormat: 'pdf' | 'excel' = 'pdf';\n  isExporting = false;\n\n  constructor(\n    private dashboardService: DashboardService,\n    private zskService: ZskService,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    // Initialize form first\n    this.initFilterForm();\n\n    // Load maintenance types for filter options\n    this.loadFilterOptions();\n\n    // Load initial dashboard data\n    setTimeout(() => {\n      this.loadDashboardData();\n    });\n  }\n\n  initFilterForm(): void {\n    this.filterForm = this.fb.group({\n      minProductionRate: [null],\n      maxProductionRate: [null],\n      extractionYear: [new Date().getFullYear()],\n      fromYear: [null],\n      toYear: [null],\n      maintenanceTypeId: [null],\n      minCost: [null],\n      maxCost: [null],\n      fieldId: [null]\n    });\n\n    // Subscribe to form changes to reload data when filters change\n    this.filterForm.valueChanges.subscribe(() => {\n      this.loadDashboardData();\n    });\n  }\n\n  loadFilterOptions(): void {\n    forkJoin({\n      maintenanceTypes: this.zskService.getMaintenanceTypes(),\n      fields: this.zskService.getFields()\n    }).subscribe(result => {\n      // Process maintenance types\n      this.maintenanceTypes = result.maintenanceTypes;\n      this.maintenanceTypeOptions = this.maintenanceTypes.map(type => ({\n        value: type.zMaintenanceTypeId,\n        label: type.name\n      }));\n\n      // Process fields\n      this.fields = result.fields;\n      this.fieldOptions = this.fields.map(field => ({\n        value: field.zFieldId,\n        label: field.name\n      }));\n    });\n  }\n\n  loadDashboardData(): void {\n    // Make sure to have a filter object even if form is not initialized\n    const filter: DashboardFilter = this.filterForm?.value || {};\n\n    // Make API call\n    this.dashboardService.getDashboardData(filter).subscribe({\n      next: (data) => {\n        this.dashboardData = data;\n        this.updateStats();\n        this.renderCharts();\n      },\n      error: (error) => {\n        console.error('Error loading dashboard data:', error);\n      }\n    });\n  }\n\n  updateStats(): void {\n    if (this.dashboardData) {\n      this.totalProductionRate = this.dashboardData.totalProductionRate;\n      this.totalMaintenanceCost = this.dashboardData.totalMaintenanceCost;\n      this.fieldCount = this.dashboardData.fieldData?.length || 0;\n    }\n  }\n\n  renderCharts(): void {\n    this.renderProductionChart();\n    this.renderMaintenanceCostChart();\n  }\n\n  renderProductionChart(): void {\n    if (!this.dashboardData?.productionRateChart) return;\n\n    const data = this.dashboardData.productionRateChart;\n\n    this.productionChartOption = {\n      backgroundColor: 'transparent',\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        }\n      },\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      },\n      xAxis: {\n        type: 'category',\n        data: data.map(item => item.period),\n        axisLabel: {\n          rotate: 45,\n          color: '#333'\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#ccc'\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        name: 'Production Rate',\n        nameTextStyle: {\n          color: '#333'\n        },\n        axisLabel: {\n          color: '#333'\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#ccc'\n          }\n        },\n        splitLine: {\n          lineStyle: {\n            color: '#eee'\n          }\n        }\n      },\n      series: [\n        {\n          name: 'Production Rate',\n          type: 'bar',\n          data: data.map(item => item.productionRate),\n          itemStyle: {\n            color: '#3AA1FF'\n          }\n        }\n      ]\n    };\n  }\n\n  renderMaintenanceCostChart(): void {\n    if (!this.dashboardData?.maintenanceCostChart) return;\n\n    const data = this.dashboardData.maintenanceCostChart;\n\n    this.maintenanceCostChartOption = {\n      backgroundColor: 'transparent',\n      tooltip: {\n        trigger: 'axis',\n        formatter: '{a} <br/>{b}: ${c}'\n      },\n      grid: {\n        left: '3%',\n        right: '4%',\n        bottom: '3%',\n        containLabel: true\n      },\n      xAxis: {\n        type: 'category',\n        data: data.map(item => item.period),\n        axisLabel: {\n          rotate: 45,\n          color: '#333'\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#ccc'\n          }\n        }\n      },\n      yAxis: {\n        type: 'value',\n        name: 'Maintenance Cost ($)',\n        nameTextStyle: {\n          color: '#333'\n        },\n        axisLabel: {\n          color: '#333'\n        },\n        axisLine: {\n          lineStyle: {\n            color: '#ccc'\n          }\n        },\n        splitLine: {\n          lineStyle: {\n            color: '#eee'\n          }\n        }\n      },\n      series: [\n        {\n          name: 'Maintenance Cost',\n          type: 'line',\n          data: data.map(item => item.cost),\n          itemStyle: {\n            color: '#FF5722'\n          },\n          areaStyle: {\n            color: {\n              type: 'linear',\n              x: 0,\n              y: 0,\n              x2: 0,\n              y2: 1,\n              colorStops: [\n                {\n                  offset: 0,\n                  color: 'rgba(255, 87, 34, 0.7)'\n                },\n                {\n                  offset: 1,\n                  color: 'rgba(255, 87, 34, 0.1)'\n                }\n              ]\n            }\n          }\n        }\n      ]\n    };\n  }\n\n  // Show export modal\n  openExportModal(): void {\n    this.showExportModal = true;\n  }\n\n  // Close export modal\n  closeExportModal(): void {\n    this.showExportModal = false;\n  }\n\n  // Set export format\n  setExportFormat(format: 'pdf' | 'excel'): void {\n    this.exportFormat = format;\n  }\n\n  // Export dashboard data\n  exportDashboard(): void {\n    this.isExporting = true;\n    const filter: DashboardFilter = this.filterForm?.value || {};\n\n    this.dashboardService.exportDashboardData(filter, this.exportFormat).subscribe({\n      next: (blob) => {\n        const fileName = `dashboard-export-${new Date().toISOString().split('T')[0]}.${this.exportFormat === 'pdf' ? 'pdf' : 'xlsx'}`;\n        saveAs(blob, fileName);\n        this.isExporting = false;\n        this.closeExportModal();\n      },\n      error: (error) => {\n        console.error('Error exporting dashboard data:', error);\n        this.isExporting = false;\n      }\n    });\n  }\n}\n","<div class=\"p-4 bg-gray-50 dark:bg-gray-800 min-h-screen\">\n  <div class=\"mb-8 flex justify-between items-center\">\n    <h1 class=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">Gas Condensate Dashboard</h1>\n\n    <!-- Export Button -->\n    <button\n      (click)=\"openExportModal()\"\n      class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 flex items-center\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\n      </svg>\n      Export\n    </button>\n  </div>\n\n  <!-- Filter Section -->\n  <div class=\"bg-white dark:bg-gray-700 p-4 rounded-lg shadow mb-6\">\n    <h2 class=\"text-xl font-semibold text-gray-800 dark:text-white mb-4\">Filter Data</h2>\n    <form [formGroup]=\"filterForm\" class=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n      <div>\n        <app-text-input\n          formControlName=\"minProductionRate\"\n          type=\"number\"\n          label=\"Min Production Rate\"\n          placeholder=\"Minimum rate\"\n          id=\"minProductionRate\"\n          name=\"minProductionRate\"\n          inputMode=\"numeric\"\n        ></app-text-input>\n      </div>\n\n      <div>\n        <app-text-input\n          formControlName=\"maxProductionRate\"\n          type=\"number\"\n          label=\"Max Production Rate\"\n          placeholder=\"Maximum rate\"\n          id=\"maxProductionRate\"\n          name=\"maxProductionRate\"\n          inputMode=\"numeric\"\n        ></app-text-input>\n      </div>\n\n      <div>\n        <app-text-input\n          formControlName=\"extractionYear\"\n          type=\"number\"\n          label=\"Extraction Year\"\n          id=\"extractionYear\"\n          name=\"extractionYear\"\n          inputMode=\"numeric\"\n        ></app-text-input>\n      </div>\n\n      <div>\n        <app-text-input\n          formControlName=\"fromYear\"\n          type=\"number\"\n          label=\"From Year\"\n          id=\"fromYear\"\n          name=\"fromYear\"\n          inputMode=\"numeric\"\n        ></app-text-input>\n      </div>\n\n      <div>\n        <app-text-input\n          formControlName=\"toYear\"\n          type=\"number\"\n          label=\"To Year\"\n          id=\"toYear\"\n          name=\"toYear\"\n          inputMode=\"numeric\"\n        ></app-text-input>\n      </div>\n\n      <div>\n        <app-zsk-select\n          formControlName=\"maintenanceTypeId\"\n          label=\"Maintenance Type\"\n          id=\"maintenanceTypeId\"\n          name=\"maintenanceTypeId\"\n          placeholder=\"All Types\"\n          [options]=\"maintenanceTypeOptions\"\n        ></app-zsk-select>\n      </div>\n\n      <div>\n        <app-zsk-select\n          formControlName=\"fieldId\"\n          label=\"Field\"\n          id=\"fieldId\"\n          name=\"fieldId\"\n          placeholder=\"All Fields\"\n          [options]=\"fieldOptions\"\n        ></app-zsk-select>\n      </div>\n\n      <div>\n        <app-text-input\n          formControlName=\"minCost\"\n          type=\"number\"\n          label=\"Min Cost\"\n          placeholder=\"Minimum cost\"\n          id=\"minCost\"\n          name=\"minCost\"\n          inputMode=\"numeric\"\n        ></app-text-input>\n      </div>\n\n      <div>\n        <app-text-input\n          formControlName=\"maxCost\"\n          type=\"number\"\n          label=\"Max Cost\"\n          placeholder=\"Maximum cost\"\n          id=\"maxCost\"\n          name=\"maxCost\"\n          inputMode=\"numeric\"\n        ></app-text-input>\n      </div>\n    </form>\n  </div>\n\n  <!-- Summary Cards -->\n  <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n    <div class=\"bg-white dark:bg-gray-700 p-6 rounded-lg shadow\">\n      <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Total Production Rate</h3>\n      <p class=\"text-3xl font-bold text-green-600 dark:text-green-400\">{{ totalProductionRate | number }}</p>\n    </div>\n\n    <div class=\"bg-white dark:bg-gray-700 p-6 rounded-lg shadow\">\n      <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Total Maintenance Cost</h3>\n      <p class=\"text-3xl font-bold text-blue-600 dark:text-blue-400\">${{ totalMaintenanceCost | number:'1.2-2' }}</p>\n    </div>\n\n    <div class=\"bg-white dark:bg-gray-700 p-6 rounded-lg shadow\">\n      <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Field Count</h3>\n      <p class=\"text-3xl font-bold text-purple-600 dark:text-purple-400\">{{ fieldCount }}</p>\n    </div>\n  </div>\n\n  <!-- Charts -->\n  <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n    <div class=\"bg-white dark:bg-gray-700 p-4 rounded-lg shadow\">\n      <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Production Rate by Period</h3>\n      <div class=\"h-80\">\n        <div\n          echarts\n          [options]=\"productionChartOption\"\n          class=\"h-full w-full\"\n        ></div>\n      </div>\n    </div>\n\n    <div class=\"bg-white dark:bg-gray-700 p-4 rounded-lg shadow\">\n      <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Maintenance Cost by Period</h3>\n      <div class=\"h-80\">\n        <div\n          echarts\n          [options]=\"maintenanceCostChartOption\"\n          class=\"h-full w-full\"\n        ></div>\n      </div>\n    </div>\n  </div>\n\n  <!-- Field Data Table -->\n  <div class=\"bg-white dark:bg-gray-700 p-4 rounded-lg shadow mb-8\">\n    <h3 class=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">Field Data</h3>\n\n    <div class=\"overflow-x-auto\">\n      <table class=\"min-w-full divide-y divide-gray-200 dark:divide-gray-600\">\n        <thead class=\"bg-gray-50 dark:bg-gray-800\">\n          <tr>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Field Name</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Production Rate</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Extraction Year</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Maintenance Type</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Maintenance Cost</th>\n            <th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">Last Maintenance</th>\n          </tr>\n        </thead>\n        <tbody class=\"bg-white dark:bg-gray-700 divide-y divide-gray-200 dark:divide-gray-600\">\n          <tr *ngFor=\"let field of dashboardData?.fieldData\" class=\"hover:bg-gray-100 dark:hover:bg-gray-600\">\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">{{ field.fieldName }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">{{ field.productionRate | number }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">{{ field.extractionYear }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">{{ field.maintenanceType }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">${{ field.maintenanceCost | number:'1.2-2' }}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-300\">{{ field.lastMaintenanceDate | date:'medium' }}</td>\n          </tr>\n          <tr *ngIf=\"!dashboardData?.fieldData?.length\" class=\"hover:bg-gray-100 dark:hover:bg-gray-600\">\n            <td colspan=\"6\" class=\"px-6 py-4 whitespace-nowrap text-sm text-center text-gray-500 dark:text-gray-300\">No field data available</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n<!-- Export Modal -->\n<div *ngIf=\"showExportModal\" class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n  <div class=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 w-96 max-w-full\">\n    <div class=\"flex justify-between items-center mb-4\">\n      <h3 class=\"text-xl font-semibold text-gray-900 dark:text-white\">Export Dashboard</h3>\n      <button (click)=\"closeExportModal()\" class=\"text-gray-500 hover:text-gray-700 dark:text-gray-300 dark:hover:text-white\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n        </svg>\n      </button>\n    </div>\n\n    <div class=\"mb-4\">\n      <p class=\"text-gray-700 dark:text-gray-300 mb-2\">Choose export format:</p>\n      <div class=\"flex space-x-4\">\n        <div\n          (click)=\"setExportFormat('pdf')\"\n          class=\"flex flex-col items-center cursor-pointer p-3 rounded-lg border-2\"\n          [ngClass]=\"{'border-blue-500 bg-blue-50 dark:bg-blue-900': exportFormat === 'pdf', 'border-gray-200 dark:border-gray-600': exportFormat !== 'pdf'}\">\n          <div class=\"h-16 w-16 flex items-center justify-center bg-blue-50 rounded-lg mb-2\">\n            <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <rect width=\"40\" height=\"40\" rx=\"4\" fill=\"#E9F0FE\"/>\n              <path d=\"M28 14H12C11.4477 14 11 14.4477 11 15V25C11 25.5523 11.4477 26 12 26H28C28.5523 26 29 25.5523 29 25V15C29 14.4477 28.5523 14 28 14Z\" fill=\"#E9F0FE\" stroke=\"#E94335\" stroke-width=\"2\"/>\n              <rect x=\"13\" y=\"16\" width=\"14\" height=\"1\" rx=\"0.5\" fill=\"#E94335\"/>\n              <rect x=\"13\" y=\"18\" width=\"14\" height=\"1\" rx=\"0.5\" fill=\"#E94335\"/>\n              <rect x=\"13\" y=\"20\" width=\"14\" height=\"1\" rx=\"0.5\" fill=\"#E94335\"/>\n              <rect x=\"13\" y=\"22\" width=\"8\" height=\"1\" rx=\"0.5\" fill=\"#E94335\"/>\n            </svg>\n          </div>\n          <span class=\"text-gray-700 dark:text-gray-300\">PDF</span>\n        </div>\n\n        <div\n          (click)=\"setExportFormat('excel')\"\n          class=\"flex flex-col items-center cursor-pointer p-3 rounded-lg border-2\"\n          [ngClass]=\"{'border-blue-500 bg-blue-50 dark:bg-blue-900': exportFormat === 'excel', 'border-gray-200 dark:border-gray-600': exportFormat !== 'excel'}\">\n          <div class=\"h-16 w-16 flex items-center justify-center bg-white rounded-lg mb-2\">\n            <svg width=\"40\" height=\"40\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <rect width=\"40\" height=\"40\" rx=\"4\" fill=\"white\"/>\n              <rect x=\"10\" y=\"10\" width=\"20\" height=\"20\" rx=\"2\" fill=\"#4CAF50\"/>\n              <path d=\"M15 17H25\" stroke=\"white\" stroke-width=\"1.5\" stroke-linecap=\"round\"/>\n              <path d=\"M15 20H25\" stroke=\"white\" stroke-width=\"1.5\" stroke-linecap=\"round\"/>\n              <path d=\"M15 23H25\" stroke=\"white\" stroke-width=\"1.5\" stroke-linecap=\"round\"/>\n            </svg>\n          </div>\n          <span class=\"text-gray-700 dark:text-gray-300\">Excel</span>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"flex justify-end mt-6\">\n      <button\n        (click)=\"closeExportModal()\"\n        class=\"px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600 mr-2\">\n        Cancel\n      </button>\n      <button\n        (click)=\"exportDashboard()\"\n        class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 flex items-center\"\n        [disabled]=\"isExporting\">\n        <span *ngIf=\"isExporting\" class=\"mr-2\">\n          <svg class=\"animate-spin h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n            <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n            <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n          </svg>\n        </span>\n        {{ isExporting ? 'Exporting...' : 'Export' }}\n      </button>\n    </div>\n  </div>\n</div>\n"],"mappings":"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","names":["require_FileSaver_min","__commonJSMin","exports","module","a","b","c","g","d","e","f","h","i","j","k","l","m","import_file_saver","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","field_r1","fieldName","ɵɵpipeBind1","productionRate","extractionYear","maintenanceType","ɵɵtextInterpolate1","ɵɵpipeBind2","maintenanceCost","lastMaintenanceDate","ɵɵelement","ɵɵlistener","ɵɵrestoreView","_r2","ctx_r2","ɵɵnextContext","ɵɵresetView","closeExportModal","setExportFormat","exportDashboard","ɵɵtemplate","DashboardComponent_div_81_span_37_Template","ɵɵproperty","ɵɵpureFunction2","_c0","exportFormat","isExporting","DashboardComponent","dashboardService","zskService","fb","filterForm","maintenanceTypes","maintenanceTypeOptions","fields","fieldOptions","dashboardData","productionChartOption","maintenanceCostChartOption","totalProductionRate","totalMaintenanceCost","fieldCount","showExportModal","constructor","ngOnInit","initFilterForm","loadFilterOptions","setTimeout","loadDashboardData","group","minProductionRate","maxProductionRate","Date","getFullYear","fromYear","toYear","maintenanceTypeId","minCost","maxCost","fieldId","valueChanges","subscribe","forkJoin","getMaintenanceTypes","getFields","result","map","type","value","zMaintenanceTypeId","label","name","field","zFieldId","filter","getDashboardData","next","data","updateStats","renderCharts","error","console","fieldData","length","renderProductionChart","renderMaintenanceCostChart","productionRateChart","backgroundColor","tooltip","trigger","axisPointer","grid","left","right","bottom","containLabel","xAxis","item","period","axisLabel","rotate","color","axisLine","lineStyle","yAxis","nameTextStyle","splitLine","series","itemStyle","maintenanceCostChart","formatter","cost","areaStyle","x","y","x2","y2","colorStops","offset","openExportModal","format","exportDashboardData","blob","fileName","toISOString","split","saveAs","ɵɵdirectiveInject","DashboardService","ZskService","FormBuilder","selectors","decls","vars","consts","template","rf","ctx","DashboardComponent_tr_79_Template","DashboardComponent_tr_80_Template","DashboardComponent_div_81_Template","CommonModule","NgClass","NgForOf","NgIf","DecimalPipe","DatePipe","ReactiveFormsModule","ɵNgNoValidate","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","NgxEchartsModule","NgxEchartsDirective","TextInputComponent","ZskSelectComponent","styles"],"x_google_ignoreList":[0]}