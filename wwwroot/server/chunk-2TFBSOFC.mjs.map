{
  "version": 3,
  "sources": ["src/app/core/services/auth.service.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\nimport { Injectable, PLATFORM_ID, Inject } from '@angular/core';\nimport { ReplaySubject, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { isPlatformBrowser } from '@angular/common';\nimport {\n  UserLogin,\n  UserInfo,\n  UserRegister,\n  ChangePassword,\n  GenericResponse\n} from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  baseUrl = environment.apiUrl + 'auth/';\n  private currentUserSource = new ReplaySubject<UserInfo | undefined | null>(1); // Buffer size of 1\n  currentUser$ = this.currentUserSource.asObservable();\n  private isBrowser: boolean;\n\n  constructor(\n    private http: HttpClient,\n    @Inject(PLATFORM_ID) platformId: Object\n  ) {\n    this.isBrowser = isPlatformBrowser(platformId);\n    this.loadCurrentUser();\n  }\n\n  login(model: UserLogin): Observable<any> {\n    return this.http\n      .post<GenericResponse<UserInfo>>(this.baseUrl + 'login', model)\n      .pipe(\n        map((response: GenericResponse<UserInfo>) => {\n          const user = response;\n          if (user.data) {\n            if (this.isBrowser) {\n              localStorage.setItem('userInfo', JSON.stringify(user.data));\n            }\n            this.setCurrentUser(user.data);\n          }\n          return response;\n        })\n      );\n  }\n\n  loadCurrentUser(): void {\n    if (!this.isBrowser) {\n      this.currentUserSource.next(null);\n      return;\n    }\n\n    const userString = localStorage.getItem('userInfo');\n    if (!userString) {\n      this.currentUserSource.next(null);\n      return;\n    }\n\n    const user: UserInfo = JSON.parse(userString);\n\n    if (user.token && !this.tokenExpired(user.token)) {\n      this.setCurrentUser(user);\n    } else {\n      this.logout();\n    }\n  }\n\n  tokenExpired(token: string): boolean {\n    try {\n      const expiry = JSON.parse(atob(token.split('.')[1])).exp;\n      return Math.floor(new Date().getTime() / 1000) >= expiry;\n    } catch {\n      return true;\n    }\n  }\n\n  logout(): void {\n    if (this.isBrowser) {\n      localStorage.removeItem('userInfo');\n    }\n    this.currentUserSource.next(null);\n  }\n\n  register(register: UserRegister): Observable<any> {\n    return this.http.post(this.baseUrl + 'register', register);\n  }\n\n  setCurrentUser(user: UserInfo): void {\n    this.currentUserSource.next(user);\n  }\n\n  isLoggedIn(): boolean {\n    if (!this.isBrowser) {\n      return false;\n    }\n\n    const userString = localStorage.getItem('userInfo');\n    if (!userString) return false;\n\n    const user: UserInfo = JSON.parse(userString);\n    return !!user.token && !this.tokenExpired(user.token);\n  }\n\n  resetPassword(userLogin: UserLogin): Observable<any> {\n    return this.http.post(this.baseUrl + 'RestPassword', userLogin);\n  }\n\n  changePassword(changePassword: ChangePassword): Observable<any> {\n    return this.http.post(this.baseUrl + 'ChangePassword', changePassword);\n  }\n\n  userExists(userName: string): Observable<any> {\n    return this.http.get(this.baseUrl + 'UserExists/' + userName);\n  }\n\n  roleMatch(allowedRoles: string[]): boolean {\n    let isMatch = false;\n    if (allowedRoles) {\n      let userInfo: UserInfo | undefined | null;\n      this.currentUser$.pipe(take(1)).subscribe((user) => {\n        userInfo = user;\n        if (userInfo?.token) {\n          allowedRoles.forEach((r) => {\n            const roles = user?.role as any[];\n            if (roles && roles.find((e) => e === r)) {\n              isMatch = true;\n            }\n          });\n        }\n      });\n    }\n    return isMatch;\n  }\n}\n"],
  "mappings": "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",
  "names": ["AuthService", "http", "baseUrl", "environment", "apiUrl", "currentUserSource", "ReplaySubject", "currentUser$", "asObservable", "isBrowser", "constructor", "platformId", "isPlatformBrowser", "loadCurrentUser", "login", "model", "post", "pipe", "map", "response", "user", "data", "localStorage", "setItem", "JSON", "stringify", "setCurrentUser", "next", "userString", "getItem", "parse", "token", "tokenExpired", "logout", "expiry", "atob", "split", "exp", "Math", "floor", "Date", "getTime", "removeItem", "register", "isLoggedIn", "resetPassword", "userLogin", "changePassword", "userExists", "userName", "get", "roleMatch", "allowedRoles", "isMatch", "userInfo", "take", "subscribe", "forEach", "r", "roles", "role", "find", "e", "\u0275\u0275inject", "HttpClient", "PLATFORM_ID", "factory", "\u0275fac", "providedIn"]
}
